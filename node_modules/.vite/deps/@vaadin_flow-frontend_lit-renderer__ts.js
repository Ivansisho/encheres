import {
  lit_exports
} from "./chunk-TCT44YIB.js";
import "./chunk-BQOD6VY2.js";

// node_modules/@vaadin/flow-frontend/lit-renderer.ts
var _window = window;
_window.Vaadin = _window.Vaadin || {};
_window.Vaadin.setLitRenderer = (component, rendererName, templateExpression, returnChannel, clientCallables, propertyNamespace) => {
  const renderFunction = Function(`
    "use strict";

    const [render, html, returnChannel] = arguments;

    return (root, {item, index}, itemKey) => {
      ${clientCallables.map((clientCallable) => {
    return `
          const ${clientCallable} = (...args) => {
            if (itemKey !== undefined) {
              returnChannel('${clientCallable}', itemKey, args[0] instanceof Event ? [] : [...args]);
            }
          }`;
  }).join("")}

      render(html\`${templateExpression}\`, root)
    }
  `)(lit_exports.render, lit_exports.html, returnChannel);
  const renderer = (root, _, { index, item }) => {
    if (root.__litRenderer !== renderer) {
      root.innerHTML = "";
      delete root._$litPart$;
      root.__litRenderer = renderer;
    }
    const mappedItem = {};
    for (const key in item) {
      if (key.startsWith(propertyNamespace)) {
        mappedItem[key.replace(propertyNamespace, "")] = item[key];
      }
    }
    renderFunction(root, { index, item: mappedItem }, item.key);
  };
  renderer.__rendererId = propertyNamespace;
  component[rendererName] = renderer;
};
_window.Vaadin.unsetLitRenderer = (component, rendererName, rendererId) => {
  var _a;
  if (((_a = component[rendererName]) == null ? void 0 : _a.__rendererId) === rendererId) {
    component[rendererName] = void 0;
  }
};
//# sourceMappingURL=@vaadin_flow-frontend_lit-renderer__ts.js.map
