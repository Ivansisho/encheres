import {
  __commonJS
} from "./chunk-BQOD6VY2.js";

// node_modules/@vaadin/flow-frontend/contextMenuConnector.js
var require_contextMenuConnector = __commonJS({
  "node_modules/@vaadin/flow-frontend/contextMenuConnector.js"() {
    (function() {
      function tryCatchWrapper(callback) {
        return window.Vaadin.Flow.tryCatchWrapper(callback, "Vaadin Context Menu");
      }
      function getContainer(appId, nodeId) {
        try {
          return window.Vaadin.Flow.clients[appId].getByNodeId(nodeId);
        } catch (error) {
          console.error("Could not get node %s from app %s", nodeId, appId);
          console.error(error);
        }
      }
      function initLazy(contextMenu, appId) {
        if (contextMenu.$connector) {
          return;
        }
        contextMenu.$connector = {
          generateItems: tryCatchWrapper((nodeId) => {
            const items = generateItemsTree(appId, nodeId);
            contextMenu.items = items;
          })
        };
      }
      function generateItemsTree(appId, nodeId) {
        const container = getContainer(appId, nodeId);
        if (!container) {
          return;
        }
        return Array.from(container.children).map((child) => {
          const item = {
            component: child,
            checked: child._checked,
            theme: child.__theme
          };
          if (child.localName == "vaadin-context-menu-item" && child._containerNodeId) {
            item.children = generateItemsTree(appId, child._containerNodeId);
          }
          child._item = item;
          return item;
        });
      }
      function setChecked(component, checked) {
        if (component._item) {
          component._item.checked = checked;
        }
      }
      function setTheme(component, theme) {
        if (component._item) {
          component._item.theme = theme;
        }
      }
      window.Vaadin.Flow.contextMenuConnector = {
        initLazy(...args) {
          return tryCatchWrapper(initLazy)(...args);
        },
        generateItemsTree(...args) {
          return tryCatchWrapper(generateItemsTree)(...args);
        },
        setChecked(...args) {
          return tryCatchWrapper(setChecked)(...args);
        },
        setTheme(...args) {
          return tryCatchWrapper(setTheme)(...args);
        }
      };
    })();
  }
});

export {
  require_contextMenuConnector
};
//# sourceMappingURL=chunk-AM6BF66F.js.map
