import {
  ConnectionIndicator,
  ConnectionState
} from "./chunk-BZQRRQX3.js";
import "./chunk-TCT44YIB.js";
import "./chunk-BQOD6VY2.js";

// node_modules/@vaadin/common-frontend/index.js
var $wnd = window;
$wnd.Vaadin = $wnd.Vaadin || {};
$wnd.Vaadin.registrations = $wnd.Vaadin.registrations || [];
$wnd.Vaadin.registrations.push({
  is: "@vaadin/common-frontend",
  version: "0.0.17"
});

// node_modules/@vaadin/flow-frontend/Flow.js
var FlowUiInitializationError = class extends Error {
};
var flowRoot = window.document.body;
var $wnd2 = window;
var Flow = class {
  constructor(config) {
    this.response = void 0;
    this.pathname = "";
    this.isActive = false;
    this.baseRegex = /^\//;
    flowRoot.$ = flowRoot.$ || [];
    this.config = config || {};
    $wnd2.Vaadin = $wnd2.Vaadin || {};
    $wnd2.Vaadin.Flow = $wnd2.Vaadin.Flow || {};
    $wnd2.Vaadin.Flow.clients = {
      TypeScript: {
        isActive: () => this.isActive
      }
    };
    const elm = document.head.querySelector("base");
    this.baseRegex = new RegExp(`^${(document.baseURI || elm && elm.href || "/").replace(/^https?:\/\/[^/]+/i, "")}`);
    this.appShellTitle = document.title;
    this.addConnectionIndicator();
  }
  get serverSideRoutes() {
    return [
      {
        path: "(.*)",
        action: this.action
      }
    ];
  }
  loadingStarted() {
    this.isActive = true;
    $wnd2.Vaadin.connectionState.loadingStarted();
  }
  loadingFinished() {
    this.isActive = false;
    $wnd2.Vaadin.connectionState.loadingFinished();
  }
  get action() {
    return async (params) => {
      this.pathname = params.pathname;
      if ($wnd2.Vaadin.connectionState.online) {
        try {
          await this.flowInit();
        } catch (error) {
          if (error instanceof FlowUiInitializationError) {
            $wnd2.Vaadin.connectionState.state = ConnectionState.CONNECTION_LOST;
            return this.offlineStubAction();
          } else {
            throw error;
          }
        }
      } else {
        return this.offlineStubAction();
      }
      this.container.onBeforeEnter = (ctx, cmd) => this.flowNavigate(ctx, cmd);
      this.container.onBeforeLeave = (ctx, cmd) => this.flowLeave(ctx, cmd);
      return this.container;
    };
  }
  async flowLeave(ctx, cmd) {
    const { connectionState } = $wnd2.Vaadin;
    if (this.pathname === ctx.pathname || !this.isFlowClientLoaded() || connectionState.offline) {
      return Promise.resolve({});
    }
    return new Promise((resolve) => {
      this.loadingStarted();
      this.container.serverConnected = (cancel) => {
        resolve(cmd && cancel ? cmd.prevent() : {});
        this.loadingFinished();
      };
      flowRoot.$server.leaveNavigation(this.getFlowRoute(ctx));
    });
  }
  async flowNavigate(ctx, cmd) {
    if (this.response) {
      return new Promise((resolve) => {
        this.loadingStarted();
        this.container.serverConnected = (cancel, redirectContext) => {
          if (cmd && cancel) {
            resolve(cmd.prevent());
          } else if (cmd && cmd.redirect && redirectContext) {
            resolve(cmd.redirect(redirectContext.pathname));
          } else {
            this.container.style.display = "";
            resolve(this.container);
          }
          this.loadingFinished();
        };
        flowRoot.$server.connectClient(this.container.localName, this.container.id, this.getFlowRoute(ctx), this.appShellTitle, history.state);
      });
    } else {
      return Promise.resolve(this.container);
    }
  }
  getFlowRoute(context) {
    return (context.pathname + (context.search || "")).replace(this.baseRegex, "");
  }
  async flowInit(serverSideRouting = false) {
    if (!this.isFlowClientLoaded()) {
      this.loadingStarted();
      this.response = await this.flowInitUi(serverSideRouting);
      this.response.appConfig.clientRouting = !serverSideRouting;
      const { pushScript, appConfig } = this.response;
      if (typeof pushScript === "string") {
        await this.loadScript(pushScript);
      }
      const { appId } = appConfig;
      const bootstrapMod = await import("./FlowBootstrap-PN7BUG5X.js");
      await bootstrapMod.init(this.response);
      if (typeof this.config.imports === "function") {
        this.injectAppIdScript(appId);
        await this.config.imports();
      }
      const clientMod = await import("./FlowClient-YTXUHE7A.js");
      await this.flowInitClient(clientMod);
      if (!serverSideRouting) {
        const tag = `flow-container-${appId.toLowerCase()}`;
        this.container = document.createElement(tag);
        flowRoot.$[appId] = this.container;
        this.container.id = appId;
      }
      this.loadingFinished();
    }
    if (this.container && !this.container.isConnected) {
      this.container.style.display = "none";
      document.body.appendChild(this.container);
    }
    return this.response;
  }
  async loadScript(url) {
    return new Promise((resolve, reject) => {
      const script = document.createElement("script");
      script.onload = () => resolve();
      script.onerror = reject;
      script.src = url;
      document.body.appendChild(script);
    });
  }
  injectAppIdScript(appId) {
    const appIdWithoutHashCode = appId.substring(0, appId.lastIndexOf("-"));
    const scriptAppId = document.createElement("script");
    scriptAppId.type = "module";
    scriptAppId.setAttribute("data-app-id", appIdWithoutHashCode);
    document.body.append(scriptAppId);
  }
  async flowInitClient(clientMod) {
    clientMod.init();
    return new Promise((resolve) => {
      const intervalId = setInterval(() => {
        const initializing = Object.keys($wnd2.Vaadin.Flow.clients).filter((key) => key !== "TypeScript").reduce((prev, id) => prev || $wnd2.Vaadin.Flow.clients[id].isActive(), false);
        if (!initializing) {
          clearInterval(intervalId);
          resolve();
        }
      }, 5);
    });
  }
  async flowInitUi(serverSideRouting) {
    const initial = $wnd2.Vaadin && $wnd2.Vaadin.TypeScript && $wnd2.Vaadin.TypeScript.initial;
    if (initial) {
      $wnd2.Vaadin.TypeScript.initial = void 0;
      return Promise.resolve(initial);
    }
    return new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      const httpRequest = xhr;
      const serverRoutingParam = serverSideRouting ? "&serverSideRouting" : "";
      const requestPath = `?v-r=init&location=${encodeURIComponent(this.getFlowRoute(location))}${serverRoutingParam}`;
      httpRequest.open("GET", requestPath);
      httpRequest.onerror = () => reject(new FlowUiInitializationError(`Invalid server response when initializing Flow UI.
        ${httpRequest.status}
        ${httpRequest.responseText}`));
      httpRequest.onload = () => {
        const contentType = httpRequest.getResponseHeader("content-type");
        if (contentType && contentType.indexOf("application/json") !== -1) {
          resolve(JSON.parse(httpRequest.responseText));
        } else {
          httpRequest.onerror();
        }
      };
      httpRequest.send();
    });
  }
  addConnectionIndicator() {
    ConnectionIndicator.create();
    $wnd2.addEventListener("online", () => {
      if (!this.isFlowClientLoaded()) {
        $wnd2.Vaadin.connectionState.state = ConnectionState.RECONNECTING;
        const http = new XMLHttpRequest();
        http.open("HEAD", "sw.js");
        http.onload = () => {
          $wnd2.Vaadin.connectionState.state = ConnectionState.CONNECTED;
        };
        http.onerror = () => {
          $wnd2.Vaadin.connectionState.state = ConnectionState.CONNECTION_LOST;
        };
        setTimeout(() => http.send(), 50);
      }
    });
    $wnd2.addEventListener("offline", () => {
      if (!this.isFlowClientLoaded()) {
        $wnd2.Vaadin.connectionState.state = ConnectionState.CONNECTION_LOST;
      }
    });
  }
  async offlineStubAction() {
    const offlineStub = document.createElement("iframe");
    const offlineStubPath = "./offline-stub.html";
    offlineStub.setAttribute("src", offlineStubPath);
    offlineStub.setAttribute("style", "width: 100%; height: 100%; border: 0");
    this.response = void 0;
    let onlineListener;
    const removeOfflineStubAndOnlineListener = () => {
      if (onlineListener !== void 0) {
        $wnd2.Vaadin.connectionState.removeStateChangeListener(onlineListener);
        onlineListener = void 0;
      }
    };
    offlineStub.onBeforeEnter = (ctx, _cmds, router) => {
      onlineListener = () => {
        if ($wnd2.Vaadin.connectionState.online) {
          removeOfflineStubAndOnlineListener();
          router.render(ctx, false);
        }
      };
      $wnd2.Vaadin.connectionState.addStateChangeListener(onlineListener);
    };
    offlineStub.onBeforeLeave = (_ctx, _cmds, _router) => {
      removeOfflineStubAndOnlineListener();
    };
    return offlineStub;
  }
  isFlowClientLoaded() {
    return this.response !== void 0;
  }
};
export {
  Flow
};
//# sourceMappingURL=@vaadin_flow-frontend_Flow.js.map
