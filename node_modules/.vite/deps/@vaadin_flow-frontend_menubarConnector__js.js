import {
  require_contextMenuConnector
} from "./chunk-AM6BF66F.js";
import {
  __toESM
} from "./chunk-BQOD6VY2.js";

// node_modules/@vaadin/flow-frontend/menubarConnector.js
var import_contextMenuConnector = __toESM(require_contextMenuConnector());
(function() {
  const tryCatchWrapper = function(callback) {
    return window.Vaadin.Flow.tryCatchWrapper(callback, "Vaadin Menu Bar");
  };
  function initLazy(menubar, appId) {
    if (menubar.$connector) {
      return;
    }
    const observer = new MutationObserver((records) => {
      const hasChangedAttributes = records.some((entry) => {
        const oldValue = entry.oldValue;
        const newValue = entry.target.getAttribute(entry.attributeName);
        return oldValue !== newValue;
      });
      if (hasChangedAttributes) {
        menubar.$connector.generateItems();
      }
    });
    menubar.$connector = {
      generateItems: tryCatchWrapper((nodeId) => {
        if (!menubar.shadowRoot) {
          setTimeout(() => menubar.$connector.generateItems(nodeId));
          return;
        }
        if (nodeId) {
          menubar.__generatedItems = window.Vaadin.Flow.contextMenuConnector.generateItemsTree(appId, nodeId);
        }
        let items = menubar.__generatedItems || [];
        items.forEach((item) => item.disabled = item.component.disabled);
        items = items.filter((item) => !item.component.hidden);
        items.forEach((item) => {
          observer.observe(item.component, {
            attributeFilter: ["hidden", "disabled"],
            attributeOldValue: true
          });
        });
        menubar.items = items;
        menubar._buttons.forEach((button) => {
          if (button.item && button.item.component) {
            button.addEventListener("click", (e) => {
              if (e.composedPath().indexOf(button.item.component) === -1) {
                button.item.component.click();
                e.stopPropagation();
              }
            });
          }
        });
      })
    };
  }
  window.Vaadin.Flow.menubarConnector = {
    initLazy(...args) {
      return tryCatchWrapper(initLazy)(...args);
    }
  };
})();
//# sourceMappingURL=@vaadin_flow-frontend_menubarConnector__js.js.map
