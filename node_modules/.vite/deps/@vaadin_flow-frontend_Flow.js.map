{
  "version": 3,
  "sources": ["../../@vaadin/common-frontend/src/index.ts", "../../../../src/main/frontend/Flow.ts"],
  "sourcesContent": ["export * from './ConnectionState.js';\nexport * from './ConnectionIndicator.js';\n\nconst $wnd = window as any;\n$wnd.Vaadin = $wnd.Vaadin || {};\n$wnd.Vaadin.registrations = $wnd.Vaadin.registrations || [];\n$wnd.Vaadin.registrations.push({\n  is: '@vaadin/common-frontend',\n  version: /* updated-by-script */ '0.0.17',\n});\n", "import {\n  ConnectionIndicator,\n  ConnectionState,\n  ConnectionStateChangeListener,\n  ConnectionStateStore\n} from '@vaadin/common-frontend';\n\nexport interface FlowConfig {\n  imports?: () => void;\n}\n\nclass FlowUiInitializationError extends Error {}\n\ninterface AppConfig {\n  productionMode: boolean;\n  appId: string;\n  uidl: any;\n  clientRouting: boolean;\n}\n\ninterface AppInitResponse {\n  appConfig: AppConfig;\n  pushScript?: string;\n}\n\ninterface Router {\n  render: (ctx: NavigationParameters, shouldUpdateHistory: boolean) => Promise<void>;\n}\n\ninterface HTMLRouterContainer extends HTMLElement {\n  onBeforeEnter?: (ctx: NavigationParameters, cmd: PreventAndRedirectCommands, router: Router) => void | Promise<any>;\n  onBeforeLeave?: (ctx: NavigationParameters, cmd: PreventCommands, router: Router) => void | Promise<any>;\n  serverConnected?: (cancel: boolean, url?: NavigationParameters) => void;\n}\n\ninterface FlowRoute {\n  action: (params: NavigationParameters) => Promise<HTMLRouterContainer>;\n  path: string;\n}\n\ninterface FlowRoot {\n  $: any;\n  $server: any;\n}\n\nexport interface NavigationParameters {\n  pathname: string;\n  search: string;\n}\n\nexport interface PreventCommands {\n  prevent: () => any;\n}\n\nexport interface PreventAndRedirectCommands extends PreventCommands {\n  redirect: (route: string) => any;\n}\n\n// flow uses body for keeping references\nconst flowRoot: FlowRoot = window.document.body as any;\nconst $wnd = (window as any) as {\n  Vaadin: {\n    Flow: any;\n    TypeScript: any;\n    connectionState: ConnectionStateStore;\n  };\n} & EventTarget;\n\n/**\n * Client API for flow UI operations.\n */\nexport class Flow {\n  config: FlowConfig;\n  response?: AppInitResponse = undefined;\n  pathname = '';\n\n  container!: HTMLRouterContainer;\n\n  // flag used to inform Testbench whether a server route is in progress\n  private isActive = false;\n\n  private baseRegex = /^\\//;\n  private appShellTitle: string;\n\n  constructor(config?: FlowConfig) {\n    flowRoot.$ = flowRoot.$ || [];\n    this.config = config || {};\n\n    // TB checks for the existence of window.Vaadin.Flow in order\n    // to consider that TB needs to wait for `initFlow()`.\n    $wnd.Vaadin = $wnd.Vaadin || {};\n    $wnd.Vaadin.Flow = $wnd.Vaadin.Flow || {};\n    $wnd.Vaadin.Flow.clients = {\n      TypeScript: {\n        isActive: () => this.isActive\n      }\n    };\n\n    // Regular expression used to remove the app-context\n    const elm = document.head.querySelector('base');\n    this.baseRegex = new RegExp(\n      `^${\n        // IE11 does not support document.baseURI\n        (document.baseURI || (elm && elm.href) || '/').replace(/^https?:\\/\\/[^/]+/i, '')\n      }`\n    );\n    this.appShellTitle = document.title;\n    // Put a vaadin-connection-indicator in the dom\n    this.addConnectionIndicator();\n  }\n\n  /**\n   * Return a `route` object for vaadin-router in an one-element array.\n   *\n   * The `FlowRoute` object `path` property handles any route,\n   * and the `action` returns the flow container without updating the content,\n   * delaying the actual Flow server call to the `onBeforeEnter` phase.\n   *\n   * This is a specific API for its use with `vaadin-router`.\n   */\n  get serverSideRoutes(): [FlowRoute] {\n    return [\n      {\n        path: '(.*)',\n        action: this.action\n      }\n    ];\n  }\n\n  loadingStarted() {\n    // Make Testbench know that server request is in progress\n    this.isActive = true;\n    $wnd.Vaadin.connectionState.loadingStarted();\n  }\n\n  loadingFinished() {\n    // Make Testbench know that server request has finished\n    this.isActive = false;\n    $wnd.Vaadin.connectionState.loadingFinished();\n  }\n\n  private get action(): (params: NavigationParameters) => Promise<HTMLRouterContainer> {\n    // Return a function which is bound to the flow instance, thus we can use\n    // the syntax `...serverSideRoutes` in vaadin-router.\n    return async (params: NavigationParameters) => {\n      // Store last action pathname so as we can check it in events\n      this.pathname = params.pathname;\n\n      if ($wnd.Vaadin.connectionState.online) {\n        try {\n          await this.flowInit();\n        } catch (error) {\n          if (error instanceof FlowUiInitializationError) {\n            // error initializing Flow: assume connection lost\n            $wnd.Vaadin.connectionState.state = ConnectionState.CONNECTION_LOST;\n            return this.offlineStubAction();\n          } else {\n            throw error;\n          }\n        }\n      } else {\n        // insert an offline stub\n        return this.offlineStubAction();\n      }\n\n      // When an action happens, navigation will be resolved `onBeforeEnter`\n      this.container.onBeforeEnter = (ctx, cmd) => this.flowNavigate(ctx, cmd);\n      // For covering the 'server -> client' use case\n      this.container.onBeforeLeave = (ctx, cmd) => this.flowLeave(ctx, cmd);\n      return this.container;\n    };\n  }\n\n  // Send a remote call to `JavaScriptBootstrapUI` to check\n  // whether navigation has to be cancelled.\n  private async flowLeave(ctx: NavigationParameters, cmd?: PreventCommands): Promise<any> {\n    // server -> server, viewing offline stub, or browser is offline\n    const { connectionState } = $wnd.Vaadin;\n    if (this.pathname === ctx.pathname || !this.isFlowClientLoaded() || connectionState.offline) {\n      return Promise.resolve({});\n    }\n    // 'server -> client'\n    return new Promise((resolve) => {\n      this.loadingStarted();\n      // The callback to run from server side to cancel navigation\n      this.container.serverConnected = (cancel) => {\n        resolve(cmd && cancel ? cmd.prevent() : {});\n        this.loadingFinished();\n      };\n\n      // Call server side to check whether we can leave the view\n      flowRoot.$server.leaveNavigation(this.getFlowRoute(ctx));\n    });\n  }\n\n  // Send the remote call to `JavaScriptBootstrapUI` to render the flow\n  // route specified by the context\n  private async flowNavigate(ctx: NavigationParameters, cmd?: PreventAndRedirectCommands): Promise<HTMLElement> {\n    if (this.response) {\n      return new Promise((resolve) => {\n        this.loadingStarted();\n        // The callback to run from server side once the view is ready\n        this.container.serverConnected = (cancel, redirectContext?: NavigationParameters) => {\n          if (cmd && cancel) {\n            resolve(cmd.prevent());\n          } else if (cmd && cmd.redirect && redirectContext) {\n            resolve(cmd.redirect(redirectContext.pathname));\n          } else {\n            this.container.style.display = '';\n            resolve(this.container);\n          }\n          this.loadingFinished();\n        };\n\n        // Call server side to navigate to the given route\n        flowRoot.$server.connectClient(\n          this.container.localName,\n          this.container.id,\n          this.getFlowRoute(ctx),\n          this.appShellTitle,\n          history.state\n        );\n      });\n    } else {\n      // No server response => offline or erroneous connection\n      return Promise.resolve(this.container);\n    }\n  }\n\n  private getFlowRoute(context: NavigationParameters | Location): string {\n    return (context.pathname + (context.search || '')).replace(this.baseRegex, '');\n  }\n\n  // import flow client modules and initialize UI in server side.\n  private async flowInit(serverSideRouting = false): Promise<AppInitResponse> {\n    // Do not start flow twice\n    if (!this.isFlowClientLoaded()) {\n      // show flow progress indicator\n      this.loadingStarted();\n\n      // Initialize server side UI\n      this.response = await this.flowInitUi(serverSideRouting);\n\n      // Enable or disable server side routing\n      this.response.appConfig.clientRouting = !serverSideRouting;\n\n      const { pushScript, appConfig } = this.response;\n\n      if (typeof pushScript === 'string') {\n        await this.loadScript(pushScript);\n      }\n      const { appId } = appConfig;\n\n      // Load bootstrap script with server side parameters\n      const bootstrapMod = await import('./FlowBootstrap');\n      await bootstrapMod.init(this.response);\n\n      // Load custom modules defined by user\n      if (typeof this.config.imports === 'function') {\n        this.injectAppIdScript(appId);\n        await this.config.imports();\n      }\n\n      // Load flow-client module\n      const clientMod = await import('./FlowClient');\n      await this.flowInitClient(clientMod);\n\n      if (!serverSideRouting) {\n        // we use a custom tag for the flow app container\n        const tag = `flow-container-${appId.toLowerCase()}`;\n        this.container = document.createElement(tag);\n        flowRoot.$[appId] = this.container;\n        this.container.id = appId;\n      }\n\n      // hide flow progress indicator\n      this.loadingFinished();\n    }\n\n    // It might be that components created from server expect that their content has been rendered.\n    // Appending eagerly the container we avoid these kind of errors.\n    // Note that the client router will move this container to the outlet if the navigation succeed\n    if (this.container && !this.container.isConnected) {\n      this.container.style.display = 'none';\n      document.body.appendChild(this.container);\n    }\n    return this.response!;\n  }\n\n  private async loadScript(url: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.onload = () => resolve();\n      script.onerror = reject;\n      script.src = url;\n      document.body.appendChild(script);\n    });\n  }\n\n  private injectAppIdScript(appId: string) {\n    const appIdWithoutHashCode = appId.substring(0, appId.lastIndexOf('-'));\n    const scriptAppId = document.createElement('script');\n    scriptAppId.type = 'module';\n    scriptAppId.setAttribute('data-app-id', appIdWithoutHashCode);\n    document.body.append(scriptAppId);\n  }\n\n  // After the flow-client javascript module has been loaded, this initializes flow UI\n  // in the browser.\n  private async flowInitClient(clientMod: any): Promise<void> {\n    clientMod.init();\n    // client init is async, we need to loop until initialized\n    return new Promise((resolve) => {\n      const intervalId = setInterval(() => {\n        // client `isActive() == true` while initializing or processing\n        const initializing = Object.keys($wnd.Vaadin.Flow.clients)\n          .filter((key) => key !== 'TypeScript')\n          .reduce((prev, id) => prev || $wnd.Vaadin.Flow.clients[id].isActive(), false);\n        if (!initializing) {\n          clearInterval(intervalId);\n          resolve();\n        }\n      }, 5);\n    });\n  }\n\n  // Returns the `appConfig` object\n  private async flowInitUi(serverSideRouting: boolean): Promise<AppInitResponse> {\n    // appConfig was sent in the index.html request\n    const initial = $wnd.Vaadin && $wnd.Vaadin.TypeScript && $wnd.Vaadin.TypeScript.initial;\n    if (initial) {\n      $wnd.Vaadin.TypeScript.initial = undefined;\n      return Promise.resolve(initial);\n    }\n\n    // send a request to the `JavaScriptBootstrapHandler`\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      const httpRequest = xhr as any;\n      const serverRoutingParam = serverSideRouting ? '&serverSideRouting' : '';\n      const requestPath = `?v-r=init&location=${encodeURIComponent(this.getFlowRoute(location))}${serverRoutingParam}`;\n\n      httpRequest.open('GET', requestPath);\n\n      httpRequest.onerror = () =>\n        reject(\n          new FlowUiInitializationError(\n            `Invalid server response when initializing Flow UI.\n        ${httpRequest.status}\n        ${httpRequest.responseText}`\n          )\n        );\n\n      httpRequest.onload = () => {\n        const contentType = httpRequest.getResponseHeader('content-type');\n        if (contentType && contentType.indexOf('application/json') !== -1) {\n          resolve(JSON.parse(httpRequest.responseText));\n        } else {\n          httpRequest.onerror();\n        }\n      };\n      httpRequest.send();\n    });\n  }\n\n  // Create shared connection state store and connection indicator\n  private addConnectionIndicator() {\n    // add connection indicator to DOM\n    ConnectionIndicator.create();\n\n    // Listen to browser online/offline events and update the loading indicator accordingly.\n    // Note: if flow-client is loaded, it instead handles the state transitions.\n    $wnd.addEventListener('online', () => {\n      if (!this.isFlowClientLoaded()) {\n        // Send an HTTP HEAD request for sw.js to verify server reachability.\n        // We do not expect sw.js to be cached, so the request goes to the\n        // server rather than being served from local cache.\n        // Require network-level failure to revert the state to CONNECTION_LOST\n        // (HTTP error code is ok since it still verifies server's presence).\n        $wnd.Vaadin.connectionState.state = ConnectionState.RECONNECTING;\n        const http = new XMLHttpRequest();\n        http.open('HEAD', 'sw.js');\n        http.onload = () => {\n          $wnd.Vaadin.connectionState.state = ConnectionState.CONNECTED;\n        };\n        http.onerror = () => {\n          $wnd.Vaadin.connectionState.state = ConnectionState.CONNECTION_LOST;\n        };\n        // Postpone request to reduce potential net::ERR_INTERNET_DISCONNECTED\n        // errors that sometimes occurs even if browser says it is online\n        setTimeout(() => http.send(), 50);\n      }\n    });\n    $wnd.addEventListener('offline', () => {\n      if (!this.isFlowClientLoaded()) {\n        $wnd.Vaadin.connectionState.state = ConnectionState.CONNECTION_LOST;\n      }\n    });\n  }\n\n  private async offlineStubAction() {\n    const offlineStub = document.createElement('iframe') as HTMLRouterContainer;\n    const offlineStubPath = './offline-stub.html';\n    offlineStub.setAttribute('src', offlineStubPath);\n    offlineStub.setAttribute('style', 'width: 100%; height: 100%; border: 0');\n    this.response = undefined;\n\n    let onlineListener: ConnectionStateChangeListener | undefined;\n    const removeOfflineStubAndOnlineListener = () => {\n      if (onlineListener !== undefined) {\n        $wnd.Vaadin.connectionState.removeStateChangeListener(onlineListener);\n        onlineListener = undefined;\n      }\n    };\n\n    offlineStub.onBeforeEnter = (ctx, _cmds, router) => {\n      onlineListener = () => {\n        if ($wnd.Vaadin.connectionState.online) {\n          removeOfflineStubAndOnlineListener();\n          router.render(ctx, false);\n        }\n      };\n      $wnd.Vaadin.connectionState.addStateChangeListener(onlineListener);\n    };\n    offlineStub.onBeforeLeave = (_ctx, _cmds, _router) => {\n      removeOfflineStubAndOnlineListener();\n    };\n    return offlineStub;\n  }\n\n  private isFlowClientLoaded(): boolean {\n    return this.response !== undefined;\n  }\n}\n"],
  "mappings": "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",
  "names": ["$wnd"]
}
