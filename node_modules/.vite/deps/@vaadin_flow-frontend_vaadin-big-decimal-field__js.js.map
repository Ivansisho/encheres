{
  "version": 3,
  "sources": ["../../@vaadin/flow-frontend/vaadin-big-decimal-field.js", "dep:@vaadin_flow-frontend_vaadin-big-decimal-field__js"],
  "sourcesContent": ["/*\n * Copyright 2000-2022 Vaadin Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n(function() {\n\n  let memoizedTemplate;\n\n  customElements.whenDefined('vaadin-text-field').then(() => {\n\n    class BigDecimalFieldElement extends customElements.get('vaadin-text-field') {\n\n      static get template() {\n        if (!memoizedTemplate) {\n          memoizedTemplate = super.template.cloneNode(true);\n          memoizedTemplate.innerHTML +=\n            `<style>\n                  :host {\n                    width: 8em;\n                  }\n\n                  :host([dir=\"rtl\"]) [part=\"input-field\"] {\n                    direction: ltr;\n                  }\n\n                  :host([dir=\"rtl\"]) [part=\"input-field\"] ::slotted(input) {\n                    --_lumo-text-field-overflow-mask-image: linear-gradient(to left, transparent, #000 1.25em) !important;\n                  }\n            </style>`;\n        }\n        return memoizedTemplate;\n      }\n\n      static get is() {\n        return 'vaadin-big-decimal-field';\n      }\n\n      static get properties() {\n        return {\n          _decimalSeparator: {\n            type: String,\n            value: '.',\n            observer: '__decimalSeparatorChanged'\n          }\n        }\n      }\n\n      ready() {\n        super.ready();\n        this.inputElement.setAttribute('inputmode', 'decimal');\n      }\n\n      __decimalSeparatorChanged(separator, oldSeparator) {\n        this.allowedCharPattern = '[\\\\d-+' + separator + ']';\n\n        if (this.value && oldSeparator) {\n          this.value = this.value.split(oldSeparator).join(separator);\n        }\n      }\n\n    }\n\n    customElements.define(BigDecimalFieldElement.is, BigDecimalFieldElement);\n\n  });\n})();\n", "export default require(\"../node_modules/@vaadin/flow-frontend/vaadin-big-decimal-field.js\");"],
  "mappings": ";;;;;AAAA;AAAA;AAeA,KAAC,WAAW;AAEV,UAAI;AAEJ,qBAAe,YAAY,mBAAmB,EAAE,KAAK,MAAM;AAEzD,cAAM,+BAA+B,eAAe,IAAI,mBAAmB,EAAE;AAAA,UAE3E,WAAW,WAAW;AACpB,gBAAI,CAAC,kBAAkB;AACrB,iCAAmB,MAAM,SAAS,UAAU,IAAI;AAChD,+BAAiB,aACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAaJ;AACA,mBAAO;AAAA,UACT;AAAA,UAEA,WAAW,KAAK;AACd,mBAAO;AAAA,UACT;AAAA,UAEA,WAAW,aAAa;AACtB,mBAAO;AAAA,cACL,mBAAmB;AAAA,gBACjB,MAAM;AAAA,gBACN,OAAO;AAAA,gBACP,UAAU;AAAA,cACZ;AAAA,YACF;AAAA,UACF;AAAA,UAEA,QAAQ;AACN,kBAAM,MAAM;AACZ,iBAAK,aAAa,aAAa,aAAa,SAAS;AAAA,UACvD;AAAA,UAEA,0BAA0B,WAAW,cAAc;AACjD,iBAAK,qBAAqB,WAAW,YAAY;AAEjD,gBAAI,KAAK,SAAS,cAAc;AAC9B,mBAAK,QAAQ,KAAK,MAAM,MAAM,YAAY,EAAE,KAAK,SAAS;AAAA,YAC5D;AAAA,UACF;AAAA,QAEF;AAEA,uBAAe,OAAO,uBAAuB,IAAI,sBAAsB;AAAA,MAEzE,CAAC;AAAA,IACH,GAAG;AAAA;AAAA;;;AC5EH,IAAO,2DAAQ;",
  "names": []
}
