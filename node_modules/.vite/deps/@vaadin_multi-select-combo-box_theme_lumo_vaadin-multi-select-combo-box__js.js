import "./chunk-BQOD6VY2.js";

// node_modules/@vaadin/multi-select-combo-box/theme/lumo/vaadin-multi-select-combo-box.js
import "@vaadin/combo-box/theme/lumo/vaadin-combo-box-item-styles.js";
import "@vaadin/combo-box/theme/lumo/vaadin-combo-box-dropdown-styles.js";
import "@vaadin/input-container/theme/lumo/vaadin-input-container.js";

// node_modules/@vaadin/multi-select-combo-box/theme/lumo/vaadin-multi-select-combo-box-chip-styles.js
import "@vaadin/vaadin-lumo-styles/color.js";
import "@vaadin/vaadin-lumo-styles/font-icons.js";
import "@vaadin/vaadin-lumo-styles/spacing.js";
import "@vaadin/vaadin-lumo-styles/style.js";
import "@vaadin/vaadin-lumo-styles/typography.js";
import { fieldButton } from "@vaadin/vaadin-lumo-styles/mixins/field-button.js";
import { css, registerStyles } from "@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js";
var chip = css`
  :host {
    font-size: var(--lumo-font-size-xxs);
    line-height: 1;
    padding: 0.3125em calc(0.5em + var(--lumo-border-radius-s) / 4);
    color: var(--lumo-body-text-color);
    border-radius: var(--lumo-border-radius-s);
    background-color: var(--lumo-contrast-20pct);
    cursor: var(--lumo-clickable-cursor);
  }

  :host([focused]) {
    background-color: var(--lumo-primary-color);
    color: var(--lumo-primary-contrast-color);
  }

  :host([focused]) [part='remove-button'] {
    color: inherit;
  }

  :host(:not([part~='overflow']):not([readonly]):not([disabled])) {
    padding-inline-end: 0;
  }

  :host([part~='overflow']) {
    position: relative;
    min-width: var(--lumo-size-xxs);
    margin-inline-start: var(--lumo-space-s);
  }

  :host([part~='overflow'])::before,
  :host([part~='overflow'])::after {
    position: absolute;
    content: '';
    width: 100%;
    height: 100%;
    border-left: calc(var(--lumo-space-s) / 4) solid;
    border-radius: var(--lumo-border-radius-s);
    border-color: var(--lumo-contrast-30pct);
  }

  :host([part~='overflow'])::before {
    left: calc(-1 * var(--lumo-space-s) / 2);
  }

  :host([part~='overflow'])::after {
    left: calc(-1 * var(--lumo-space-s));
  }

  :host([part~='overflow-two']) {
    margin-inline-start: calc(var(--lumo-space-s) / 2);
  }

  :host([part~='overflow-two'])::after {
    display: none;
  }

  :host([part~='overflow-one']) {
    margin-inline-start: 0;
  }

  :host([part~='overflow-one'])::before,
  :host([part~='overflow-one'])::after {
    display: none;
  }

  [part='label'] {
    font-weight: 500;
    line-height: 1.25;
  }

  [part='remove-button'] {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: -0.3125em;
    margin-bottom: -0.3125em;
    margin-inline-start: auto;
    width: 1.25em;
    height: 1.25em;
    font-size: 1.5em;
    transition: none;
  }

  [part='remove-button']::before {
    content: var(--lumo-icons-cross);
  }

  :host([disabled]) [part='label'] {
    color: var(--lumo-disabled-text-color);
    -webkit-text-fill-color: var(--lumo-disabled-text-color);
    pointer-events: none;
  }
`;
registerStyles("vaadin-multi-select-combo-box-chip", [fieldButton, chip], {
  moduleId: "lumo-multi-select-combo-box-chip"
});

// node_modules/@vaadin/multi-select-combo-box/theme/lumo/vaadin-multi-select-combo-box-styles.js
import "@vaadin/vaadin-lumo-styles/color.js";
import "@vaadin/vaadin-lumo-styles/font-icons.js";
import "@vaadin/vaadin-lumo-styles/style.js";
import "@vaadin/vaadin-lumo-styles/typography.js";
import { inputFieldShared } from "@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js";
import { css as css2, registerStyles as registerStyles2 } from "@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js";
registerStyles2(
  "vaadin-multi-select-combo-box-item",
  css2`
    @media (any-hover: hover) {
      :host(:hover[readonly]) {
        background-color: transparent;
        cursor: default;
      }
    }
  `,
  {
    moduleId: "lumo-multi-select-combo-box-item"
  }
);
var multiSelectComboBox = css2`
  :host([has-value]) {
    padding-inline-start: 0;
  }

  :host([has-value]) ::slotted(input:placeholder-shown) {
    caret-color: var(--lumo-body-text-color) !important;
  }

  [part~='chip']:not(:last-of-type) {
    margin-inline-end: var(--lumo-space-xs);
  }

  [part~='overflow']:not([hidden]) + :not(:empty) {
    margin-inline-start: var(--lumo-space-xs);
  }

  [part='toggle-button']::before {
    content: var(--lumo-icons-dropdown);
  }

  :host([readonly][has-value]) [part='toggle-button'] {
    color: var(--lumo-contrast-60pct);
    cursor: var(--lumo-clickable-cursor);
  }
`;
registerStyles2("vaadin-multi-select-combo-box", [inputFieldShared, multiSelectComboBox], {
  moduleId: "lumo-multi-select-combo-box"
});

// node_modules/@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-chip.js
import { html, PolymerElement } from "@polymer/polymer/polymer-element.js";
import { ThemableMixin } from "@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js";
var MultiSelectComboBoxChip = class extends ThemableMixin(PolymerElement) {
  static get is() {
    return "vaadin-multi-select-combo-box-chip";
  }
  static get properties() {
    return {
      disabled: {
        type: Boolean,
        reflectToAttribute: true
      },
      readonly: {
        type: Boolean,
        reflectToAttribute: true
      },
      label: {
        type: String
      },
      item: {
        type: Object
      }
    };
  }
  static get template() {
    return html`
      <style>
        :host {
          display: inline-flex;
          align-items: center;
          align-self: center;
          white-space: nowrap;
          box-sizing: border-box;
        }

        [part='label'] {
          overflow: hidden;
          text-overflow: ellipsis;
        }

        :host(:is([readonly], [disabled], [part~='overflow'])) [part='remove-button'] {
          display: none !important;
        }
      </style>
      <div part="label">[[label]]</div>
      <div part="remove-button" role="button" on-click="_onRemoveClick"></div>
    `;
  }
  _onRemoveClick(event) {
    event.stopPropagation();
    this.dispatchEvent(
      new CustomEvent("item-removed", {
        detail: {
          item: this.item
        },
        bubbles: true,
        composed: true
      })
    );
  }
};
customElements.define(MultiSelectComboBoxChip.is, MultiSelectComboBoxChip);

// node_modules/@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-container.js
import { InputContainer } from "@vaadin/input-container/src/vaadin-input-container.js";
import { css as css3, registerStyles as registerStyles3 } from "@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js";
registerStyles3(
  "vaadin-multi-select-combo-box-container",
  css3`
    #wrapper {
      display: flex;
      width: 100%;
    }
  `,
  {
    moduleId: "vaadin-multi-select-combo-box-container-styles"
  }
);
var memoizedTemplate;
var MultiSelectComboBoxContainer = class extends InputContainer {
  static get is() {
    return "vaadin-multi-select-combo-box-container";
  }
  static get template() {
    if (!memoizedTemplate) {
      memoizedTemplate = super.template.cloneNode(true);
      const content = memoizedTemplate.content;
      const slots = content.querySelectorAll("slot");
      const wrapper = document.createElement("div");
      wrapper.setAttribute("id", "wrapper");
      content.insertBefore(wrapper, slots[2]);
      wrapper.appendChild(slots[0]);
      wrapper.appendChild(slots[1]);
    }
    return memoizedTemplate;
  }
};
customElements.define(MultiSelectComboBoxContainer.is, MultiSelectComboBoxContainer);

// node_modules/@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-item.js
import { ComboBoxItem } from "@vaadin/combo-box/src/vaadin-combo-box-item.js";
var MultiSelectComboBoxItem = class extends ComboBoxItem {
  static get is() {
    return "vaadin-multi-select-combo-box-item";
  }
};
customElements.define(MultiSelectComboBoxItem.is, MultiSelectComboBoxItem);

// node_modules/@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-overlay.js
import { ComboBoxOverlay } from "@vaadin/combo-box/src/vaadin-combo-box-overlay.js";
import { css as css4, registerStyles as registerStyles4 } from "@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js";
registerStyles4(
  "vaadin-multi-select-combo-box-overlay",
  css4`
    #overlay {
      width: var(
        --vaadin-multi-select-combo-box-overlay-width,
        var(--_vaadin-multi-select-combo-box-overlay-default-width, auto)
      );
    }
  `,
  { moduleId: "vaadin-multi-select-combo-box-overlay-styles" }
);
var MultiSelectComboBoxOverlay = class extends ComboBoxOverlay {
  static get is() {
    return "vaadin-multi-select-combo-box-overlay";
  }
};
customElements.define(MultiSelectComboBoxOverlay.is, MultiSelectComboBoxOverlay);

// node_modules/@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-scroller.js
import { ComboBoxPlaceholder } from "@vaadin/combo-box/src/vaadin-combo-box-placeholder.js";
import { ComboBoxScroller } from "@vaadin/combo-box/src/vaadin-combo-box-scroller.js";
var MultiSelectComboBoxScroller = class extends ComboBoxScroller {
  static get is() {
    return "vaadin-multi-select-combo-box-scroller";
  }
  ready() {
    super.ready();
    this.setAttribute("aria-multiselectable", "true");
  }
  __getAriaSelected(_focusedIndex, itemIndex) {
    const item = this.items[itemIndex];
    return this.__isItemSelected(item, null, this.itemIdPath).toString();
  }
  __isItemSelected(item, _selectedItem, itemIdPath) {
    if (item instanceof ComboBoxPlaceholder) {
      return false;
    }
    if (this.comboBox.readonly) {
      return false;
    }
    return this.comboBox._findIndex(item, this.comboBox.selectedItems, itemIdPath) > -1;
  }
  __updateElement(el, index) {
    super.__updateElement(el, index);
    el.toggleAttribute("readonly", this.comboBox.readonly);
  }
};
customElements.define(MultiSelectComboBoxScroller.is, MultiSelectComboBoxScroller);

// node_modules/@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-internal.js
import { html as html2, PolymerElement as PolymerElement2 } from "@polymer/polymer/polymer-element.js";
import { ComboBoxDataProviderMixin } from "@vaadin/combo-box/src/vaadin-combo-box-data-provider-mixin.js";
import { ComboBoxMixin } from "@vaadin/combo-box/src/vaadin-combo-box-mixin.js";
import { ComboBoxPlaceholder as ComboBoxPlaceholder2 } from "@vaadin/combo-box/src/vaadin-combo-box-placeholder.js";
import { ThemableMixin as ThemableMixin2 } from "@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js";
var MultiSelectComboBoxInternal = class extends ComboBoxDataProviderMixin(ComboBoxMixin(ThemableMixin2(PolymerElement2))) {
  static get is() {
    return "vaadin-multi-select-combo-box-internal";
  }
  static get template() {
    return html2`
      <style>
        :host([opened]) {
          pointer-events: auto;
        }
      </style>

      <slot></slot>

      <vaadin-multi-select-combo-box-overlay
        id="overlay"
        opened="[[_overlayOpened]]"
        loading$="[[loading]]"
        theme$="[[_theme]]"
        position-target="[[_target]]"
        no-vertical-overlap
        restore-focus-node="[[inputElement]]"
      ></vaadin-multi-select-combo-box-overlay>
    `;
  }
  static get properties() {
    return {
      filteredItems: {
        type: Array,
        notify: true
      },
      loading: {
        type: Boolean,
        notify: true
      },
      size: {
        type: Number,
        notify: true
      },
      selectedItems: {
        type: Array,
        value: () => []
      },
      lastFilter: {
        type: String,
        notify: true
      },
      _target: {
        type: Object
      }
    };
  }
  get clearElement() {
    return this.querySelector('[part="clear-button"]');
  }
  get _tagNamePrefix() {
    return "vaadin-multi-select-combo-box";
  }
  open() {
    if (!this.disabled && !(this.readonly && this.selectedItems.length === 0)) {
      this.opened = true;
    }
  }
  ready() {
    super.ready();
    this._target = this;
    this._toggleElement = this.querySelector(".toggle-button");
  }
  _initScroller() {
    const comboBox = this.getRootNode().host;
    super._initScroller(comboBox);
  }
  clear() {
    super.clear();
    if (this.inputElement) {
      this.inputElement.value = "";
    }
  }
  _onEnter(event) {
    this.__enterPressed = true;
    super._onEnter(event);
  }
  _closeOrCommit() {
    if (this.readonly) {
      this.close();
      return;
    }
    if (this.__enterPressed) {
      this.__enterPressed = null;
      const focusedItem = this.filteredItems[this._focusedIndex];
      this._commitValue();
      this._focusedIndex = this.filteredItems.indexOf(focusedItem);
      return;
    }
    super._closeOrCommit();
  }
  _commitValue() {
    this.lastFilter = this.filter;
    super._commitValue();
  }
  _onArrowDown() {
    if (!this.readonly) {
      super._onArrowDown();
    } else if (!this.opened) {
      this.open();
    }
  }
  _onArrowUp() {
    if (!this.readonly) {
      super._onArrowUp();
    } else if (!this.opened) {
      this.open();
    }
  }
  _onFocusout(event) {
    this._ignoreCommitValue = true;
    super._onFocusout(event);
    if (this.readonly && !this._closeOnBlurIsPrevented) {
      this.close();
    }
  }
  _detectAndDispatchChange() {
    if (this._ignoreCommitValue) {
      this._ignoreCommitValue = false;
      this.selectedItem = null;
      this._inputElementValue = "";
      return;
    }
    super._detectAndDispatchChange();
  }
  _overlaySelectedItemChanged(event) {
    event.stopPropagation();
    if (this.readonly) {
      return;
    }
    if (event.detail.item instanceof ComboBoxPlaceholder2) {
      return;
    }
    if (this.opened) {
      this.dispatchEvent(
        new CustomEvent("combo-box-item-selected", {
          detail: {
            item: event.detail.item
          }
        })
      );
    }
  }
  _shouldLoadPage(page) {
    if (this.readonly) {
      return false;
    }
    return super._shouldLoadPage(page);
  }
  clearCache() {
    if (this.readonly) {
      return;
    }
    super.clearCache();
  }
};
customElements.define(MultiSelectComboBoxInternal.is, MultiSelectComboBoxInternal);

// node_modules/@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box.js
import { html as html3, PolymerElement as PolymerElement3 } from "@polymer/polymer/polymer-element.js";
import { announce } from "@vaadin/component-base/src/a11y-announcer.js";
import { ElementMixin } from "@vaadin/component-base/src/element-mixin.js";
import { ResizeMixin } from "@vaadin/component-base/src/resize-mixin.js";
import { processTemplates } from "@vaadin/component-base/src/templates.js";
import { InputControlMixin } from "@vaadin/field-base/src/input-control-mixin.js";
import { InputController } from "@vaadin/field-base/src/input-controller.js";
import { LabelledInputController } from "@vaadin/field-base/src/labelled-input-controller.js";
import { inputFieldShared as inputFieldShared2 } from "@vaadin/field-base/src/styles/input-field-shared-styles.js";
import { css as css5, registerStyles as registerStyles5, ThemableMixin as ThemableMixin3 } from "@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js";
var multiSelectComboBox2 = css5`
  :host {
    --input-min-width: var(--vaadin-multi-select-combo-box-input-min-width, 4em);
  }

  [hidden] {
    display: none !important;
  }

  #chips {
    display: flex;
    align-items: center;
  }

  ::slotted(input) {
    box-sizing: border-box;
    flex: 1 0 var(--input-min-width);
  }

  [part='chip'] {
    flex: 0 1 auto;
  }

  :host(:is([readonly], [disabled])) ::slotted(input) {
    flex-grow: 0;
    flex-basis: 0;
    padding: 0;
  }
`;
registerStyles5("vaadin-multi-select-combo-box", [inputFieldShared2, multiSelectComboBox2], {
  moduleId: "vaadin-multi-select-combo-box-styles"
});
var MultiSelectComboBox = class extends ResizeMixin(InputControlMixin(ThemableMixin3(ElementMixin(PolymerElement3)))) {
  static get is() {
    return "vaadin-multi-select-combo-box";
  }
  static get template() {
    return html3`
      <div class="vaadin-multi-select-combo-box-container">
        <div part="label">
          <slot name="label"></slot>
          <span part="required-indicator" aria-hidden="true" on-click="focus"></span>
        </div>

        <vaadin-multi-select-combo-box-internal
          id="comboBox"
          items="[[__effectiveItems]]"
          item-id-path="[[itemIdPath]]"
          item-label-path="[[itemLabelPath]]"
          item-value-path="[[itemValuePath]]"
          disabled="[[disabled]]"
          readonly="[[readonly]]"
          auto-open-disabled="[[autoOpenDisabled]]"
          allow-custom-value="[[allowCustomValue]]"
          data-provider="[[dataProvider]]"
          filter="{{filter}}"
          last-filter="{{_lastFilter}}"
          loading="{{loading}}"
          size="{{size}}"
          filtered-items="[[__effectiveFilteredItems]]"
          selected-items="[[selectedItems]]"
          opened="{{opened}}"
          renderer="[[renderer]]"
          theme$="[[_theme]]"
          on-combo-box-item-selected="_onComboBoxItemSelected"
          on-change="_onComboBoxChange"
          on-custom-value-set="_onCustomValueSet"
          on-filtered-items-changed="_onFilteredItemsChanged"
        >
          <vaadin-multi-select-combo-box-container
            part="input-field"
            readonly="[[readonly]]"
            disabled="[[disabled]]"
            invalid="[[invalid]]"
            theme$="[[_theme]]"
          >
            <vaadin-multi-select-combo-box-chip
              id="overflow"
              slot="prefix"
              part$="[[_getOverflowPart(_overflowItems.length)]]"
              disabled="[[disabled]]"
              readonly="[[readonly]]"
              label="[[_getOverflowLabel(_overflowItems.length)]]"
              title$="[[_getOverflowTitle(_overflowItems)]]"
              hidden$="[[_isOverflowHidden(_overflowItems.length)]]"
              on-mousedown="_preventBlur"
            ></vaadin-multi-select-combo-box-chip>
            <div id="chips" part="chips" slot="prefix"></div>
            <slot name="input"></slot>
            <div
              id="clearButton"
              part="clear-button"
              slot="suffix"
              on-touchend="_onClearButtonTouchend"
              aria-hidden="true"
            ></div>
            <div id="toggleButton" class="toggle-button" part="toggle-button" slot="suffix" aria-hidden="true"></div>
          </vaadin-multi-select-combo-box-container>
        </vaadin-multi-select-combo-box-internal>

        <div part="helper-text">
          <slot name="helper"></slot>
        </div>

        <div part="error-message">
          <slot name="error-message"></slot>
        </div>
      </div>
    `;
  }
  static get properties() {
    return {
      autoOpenDisabled: Boolean,
      clearButtonVisible: {
        type: Boolean,
        reflectToAttribute: true,
        observer: "_clearButtonVisibleChanged",
        value: false
      },
      items: {
        type: Array
      },
      itemLabelPath: {
        type: String,
        value: "label"
      },
      itemValuePath: {
        type: String,
        value: "value"
      },
      itemIdPath: {
        type: String
      },
      i18n: {
        type: Object,
        value: () => {
          return {
            cleared: "Selection cleared",
            focused: "focused. Press Backspace to remove",
            selected: "added to selection",
            deselected: "removed from selection",
            total: "{count} items selected"
          };
        }
      },
      loading: {
        type: Boolean,
        value: false,
        reflectToAttribute: true
      },
      readonly: {
        type: Boolean,
        value: false,
        observer: "_readonlyChanged",
        reflectToAttribute: true
      },
      selectedItems: {
        type: Array,
        value: () => [],
        notify: true
      },
      opened: {
        type: Boolean,
        notify: true,
        value: false,
        reflectToAttribute: true
      },
      size: {
        type: Number
      },
      pageSize: {
        type: Number,
        value: 50,
        observer: "_pageSizeChanged"
      },
      dataProvider: {
        type: Object
      },
      allowCustomValue: {
        type: Boolean,
        value: false
      },
      placeholder: {
        type: String,
        value: "",
        observer: "_placeholderChanged"
      },
      renderer: Function,
      filter: {
        type: String,
        value: "",
        notify: true
      },
      filteredItems: Array,
      value: {
        type: String
      },
      __effectiveItems: {
        type: Array,
        computed: "__computeEffectiveItems(items, selectedItems, readonly)"
      },
      __effectiveFilteredItems: {
        type: Array,
        computed: "__computeEffectiveFilteredItems(items, filteredItems, selectedItems, readonly)"
      },
      _overflowItems: {
        type: Array,
        value: () => []
      },
      _focusedChipIndex: {
        type: Number,
        value: -1,
        observer: "_focusedChipIndexChanged"
      },
      _lastFilter: {
        type: String
      }
    };
  }
  static get observers() {
    return ["_selectedItemsChanged(selectedItems, selectedItems.*)"];
  }
  get slotStyles() {
    const tag = this.localName;
    return [
      ...super.slotStyles,
      `
        ${tag}[has-value] input::placeholder {
          color: transparent !important;
        }
      `
    ];
  }
  get clearElement() {
    return this.$.clearButton;
  }
  get _chips() {
    return this.shadowRoot.querySelectorAll('[part~="chip"]');
  }
  ready() {
    super.ready();
    this.addController(
      new InputController(this, (input) => {
        this._setInputElement(input);
        this._setFocusElement(input);
        this.stateTarget = input;
        this.ariaTarget = input;
      })
    );
    this.addController(new LabelledInputController(this.inputElement, this._labelController));
    this._inputField = this.shadowRoot.querySelector('[part="input-field"]');
    this.__updateChips();
    processTemplates(this);
  }
  checkValidity() {
    return this.required && !this.readonly ? this._hasValue : true;
  }
  clear() {
    this.__updateSelection([]);
    announce(this.i18n.cleared);
  }
  clearCache() {
    if (this.$ && this.$.comboBox) {
      this.$.comboBox.clearCache();
    }
  }
  requestContentUpdate() {
    if (this.$ && this.$.comboBox) {
      this.$.comboBox.requestContentUpdate();
    }
  }
  _disabledChanged(disabled, oldDisabled) {
    super._disabledChanged(disabled, oldDisabled);
    if (disabled || oldDisabled) {
      this.__updateChips();
    }
  }
  _inputElementChanged(input) {
    super._inputElementChanged(input);
    if (input) {
      this.$.comboBox._setInputElement(input);
    }
  }
  _setFocused(focused) {
    super._setFocused(focused);
    if (!focused) {
      this._focusedChipIndex = -1;
      this.validate();
    }
  }
  _onResize() {
    this.__updateChips();
  }
  _delegateAttribute(name, value) {
    if (!this.stateTarget) {
      return;
    }
    if (name === "required") {
      this._delegateAttribute("aria-required", value ? "true" : false);
      return;
    }
    super._delegateAttribute(name, value);
  }
  _clearButtonVisibleChanged(visible, oldVisible) {
    if (visible || oldVisible) {
      this.__updateChips();
    }
  }
  _onFilteredItemsChanged(event) {
    const { value } = event.detail;
    if (Array.isArray(value) || value == null) {
      this.filteredItems = value;
    }
  }
  _readonlyChanged(readonly, oldReadonly) {
    if (readonly || oldReadonly) {
      this.__updateChips();
    }
    if (this.dataProvider) {
      this.clearCache();
    }
  }
  _pageSizeChanged(pageSize, oldPageSize) {
    if (Math.floor(pageSize) !== pageSize || pageSize <= 0) {
      this.pageSize = oldPageSize;
      console.error('"pageSize" value must be an integer > 0');
    }
    this.$.comboBox.pageSize = this.pageSize;
  }
  _placeholderChanged(placeholder) {
    const tmpPlaceholder = this.__tmpA11yPlaceholder;
    if (tmpPlaceholder !== placeholder) {
      this.__savedPlaceholder = placeholder;
      if (tmpPlaceholder) {
        this.placeholder = tmpPlaceholder;
      }
    }
  }
  _selectedItemsChanged(selectedItems) {
    this._toggleHasValue(this._hasValue);
    if (this._hasValue) {
      const tmpPlaceholder = this._mergeItemLabels(selectedItems);
      this.__tmpA11yPlaceholder = tmpPlaceholder;
      this.placeholder = tmpPlaceholder;
    } else {
      delete this.__tmpA11yPlaceholder;
      this.placeholder = this.__savedPlaceholder;
    }
    this.__updateChips();
    this.requestContentUpdate();
  }
  _getItemLabel(item) {
    return this.$.comboBox._getItemLabel(item);
  }
  _getOverflowLabel(length) {
    return length;
  }
  _getOverflowPart(length) {
    let part = `chip overflow`;
    if (length === 1) {
      part += " overflow-one";
    } else if (length === 2) {
      part += " overflow-two";
    }
    return part;
  }
  _getOverflowTitle(items) {
    return this._mergeItemLabels(items);
  }
  _isOverflowHidden(length) {
    return length === 0;
  }
  _mergeItemLabels(items) {
    return items.map((item) => this._getItemLabel(item)).join(", ");
  }
  _findIndex(item, selectedItems, itemIdPath) {
    if (itemIdPath && item) {
      for (let index = 0; index < selectedItems.length; index++) {
        if (selectedItems[index] && selectedItems[index][itemIdPath] === item[itemIdPath]) {
          return index;
        }
      }
      return -1;
    }
    return selectedItems.indexOf(item);
  }
  __clearFilter() {
    this.filter = "";
    this.$.comboBox.clear();
  }
  __announceItem(itemLabel, isSelected, itemCount) {
    const state = isSelected ? "selected" : "deselected";
    const total = this.i18n.total.replace("{count}", itemCount || 0);
    announce(`${itemLabel} ${this.i18n[state]} ${total}`);
  }
  __removeItem(item) {
    const itemsCopy = [...this.selectedItems];
    itemsCopy.splice(itemsCopy.indexOf(item), 1);
    this.__updateSelection(itemsCopy);
    const itemLabel = this._getItemLabel(item);
    this.__announceItem(itemLabel, false, itemsCopy.length);
  }
  __selectItem(item) {
    const itemsCopy = [...this.selectedItems];
    const index = this._findIndex(item, itemsCopy, this.itemIdPath);
    const itemLabel = this._getItemLabel(item);
    let isSelected = false;
    if (index !== -1) {
      const lastFilter = this._lastFilter;
      if (lastFilter && lastFilter.toLowerCase() === itemLabel.toLowerCase()) {
        this.__clearFilter();
        return;
      }
      itemsCopy.splice(index, 1);
    } else {
      itemsCopy.push(item);
      isSelected = true;
    }
    this.__updateSelection(itemsCopy);
    this.__clearFilter();
    this.__announceItem(itemLabel, isSelected, itemsCopy.length);
  }
  __updateSelection(selectedItems) {
    this.selectedItems = selectedItems;
    this.validate();
    this.dispatchEvent(new CustomEvent("change", { bubbles: true }));
  }
  __createChip(item) {
    const chip2 = document.createElement("vaadin-multi-select-combo-box-chip");
    chip2.setAttribute("part", "chip");
    chip2.setAttribute("slot", "prefix");
    chip2.item = item;
    chip2.disabled = this.disabled;
    chip2.readonly = this.readonly;
    const label = this._getItemLabel(item);
    chip2.label = label;
    chip2.setAttribute("title", label);
    chip2.addEventListener("item-removed", (e) => this._onItemRemoved(e));
    chip2.addEventListener("mousedown", (e) => this._preventBlur(e));
    return chip2;
  }
  __getOverflowWidth() {
    const chip2 = this.$.overflow;
    chip2.style.visibility = "hidden";
    chip2.removeAttribute("hidden");
    chip2.setAttribute("part", "chip overflow");
    const overflowStyle = getComputedStyle(chip2);
    const overflowWidth = chip2.clientWidth + parseInt(overflowStyle.marginInlineStart);
    chip2.setAttribute("hidden", "");
    chip2.style.visibility = "";
    return overflowWidth;
  }
  __updateChips() {
    if (!this._inputField) {
      return;
    }
    Array.from(this._chips).forEach((chip2) => {
      if (chip2 !== this.$.overflow) {
        chip2.remove();
      }
    });
    const items = [...this.selectedItems];
    const totalWidth = this._inputField.$.wrapper.clientWidth;
    const inputWidth = parseInt(getComputedStyle(this.inputElement).flexBasis);
    let remainingWidth = totalWidth - inputWidth;
    if (items.length > 1) {
      remainingWidth -= this.__getOverflowWidth();
    }
    for (let i = items.length - 1, refNode = null; i >= 0; i--) {
      const chip2 = this.__createChip(items[i]);
      this.$.chips.insertBefore(chip2, refNode);
      if (this.$.chips.clientWidth > remainingWidth) {
        chip2.remove();
        break;
      }
      items.pop();
      refNode = chip2;
    }
    this._overflowItems = items;
  }
  _onClearButtonTouchend(event) {
    event.preventDefault();
    this.clear();
  }
  _onClearButtonClick(event) {
    event.stopPropagation();
    this.clear();
  }
  _onChange(event) {
    event.stopPropagation();
  }
  _onEscape(event) {
    if (this.clearButtonVisible && this.selectedItems && this.selectedItems.length) {
      event.stopPropagation();
      this.selectedItems = [];
    }
  }
  _onKeyDown(event) {
    super._onKeyDown(event);
    const chips = Array.from(this._chips).slice(1);
    if (!this.readonly && chips.length > 0) {
      switch (event.key) {
        case "Backspace":
          this._onBackSpace(chips);
          break;
        case "ArrowLeft":
          this._onArrowLeft(chips);
          break;
        case "ArrowRight":
          this._onArrowRight(chips);
          break;
        default:
          this._focusedChipIndex = -1;
          break;
      }
    }
  }
  _onArrowLeft(chips) {
    if (this.inputElement.value !== "" || this.opened) {
      return;
    }
    const idx = this._focusedChipIndex;
    let newIdx;
    if (this.getAttribute("dir") !== "rtl") {
      if (idx === -1) {
        newIdx = chips.length - 1;
      } else if (idx > 0) {
        newIdx = idx - 1;
      }
    } else if (idx === chips.length - 1) {
      newIdx = -1;
    } else if (idx > -1) {
      newIdx = idx + 1;
    }
    if (newIdx !== void 0) {
      this._focusedChipIndex = newIdx;
    }
  }
  _onArrowRight(chips) {
    if (this.inputElement.value !== "" || this.opened) {
      return;
    }
    const idx = this._focusedChipIndex;
    let newIdx;
    if (this.getAttribute("dir") === "rtl") {
      if (idx === -1) {
        newIdx = chips.length - 1;
      } else if (idx > 0) {
        newIdx = idx - 1;
      }
    } else if (idx === chips.length - 1) {
      newIdx = -1;
    } else if (idx > -1) {
      newIdx = idx + 1;
    }
    if (newIdx !== void 0) {
      this._focusedChipIndex = newIdx;
    }
  }
  _onBackSpace(chips) {
    if (this.inputElement.value !== "" || this.opened) {
      return;
    }
    const idx = this._focusedChipIndex;
    if (idx === -1) {
      this._focusedChipIndex = chips.length - 1;
    } else {
      this.__removeItem(chips[idx].item);
      this._focusedChipIndex = -1;
    }
  }
  _focusedChipIndexChanged(focusedIndex, oldFocusedIndex) {
    if (focusedIndex > -1 || oldFocusedIndex > -1) {
      const chips = Array.from(this._chips).slice(1);
      chips.forEach((chip2, index) => {
        chip2.toggleAttribute("focused", index === focusedIndex);
      });
      if (focusedIndex > -1) {
        const item = chips[focusedIndex].item;
        const itemLabel = this._getItemLabel(item);
        announce(`${itemLabel} ${this.i18n.focused}`);
      }
    }
  }
  _onComboBoxChange() {
    const item = this.$.comboBox.selectedItem;
    if (item) {
      this.__selectItem(item);
    }
  }
  _onComboBoxItemSelected(event) {
    this.__selectItem(event.detail.item);
  }
  _onCustomValueSet(event) {
    event.preventDefault();
    event.stopPropagation();
    this.__clearFilter();
    this.dispatchEvent(
      new CustomEvent("custom-value-set", {
        detail: event.detail,
        composed: true,
        bubbles: true
      })
    );
  }
  _onItemRemoved(event) {
    this.__removeItem(event.detail.item);
  }
  _preventBlur(event) {
    event.preventDefault();
  }
  __computeEffectiveItems(items, selectedItems, readonly) {
    return items && readonly ? selectedItems : items;
  }
  __computeEffectiveFilteredItems(items, filteredItems, selectedItems, readonly) {
    return !items && readonly ? selectedItems : filteredItems;
  }
  get _hasValue() {
    return this.selectedItems && this.selectedItems.length > 0;
  }
};
customElements.define(MultiSelectComboBox.is, MultiSelectComboBox);
/**
 * @license
 * Copyright (c) 2021 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=@vaadin_multi-select-combo-box_theme_lumo_vaadin-multi-select-combo-box__js.js.map
