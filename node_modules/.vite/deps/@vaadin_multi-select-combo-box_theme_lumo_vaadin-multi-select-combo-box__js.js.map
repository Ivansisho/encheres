{
  "version": 3,
  "sources": ["../../@vaadin/multi-select-combo-box/theme/lumo/vaadin-multi-select-combo-box.js", "../../@vaadin/multi-select-combo-box/theme/lumo/vaadin-multi-select-combo-box-chip-styles.js", "../../@vaadin/multi-select-combo-box/theme/lumo/vaadin-multi-select-combo-box-styles.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-chip.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-container.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-item.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-overlay.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-scroller.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-internal.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/combo-box/theme/lumo/vaadin-combo-box-item-styles.js';\nimport '@vaadin/combo-box/theme/lumo/vaadin-combo-box-dropdown-styles.js';\nimport '@vaadin/input-container/theme/lumo/vaadin-input-container.js';\nimport './vaadin-multi-select-combo-box-chip-styles.js';\nimport './vaadin-multi-select-combo-box-styles.js';\nimport '../../src/vaadin-multi-select-combo-box.js';\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/font-icons.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport { fieldButton } from '@vaadin/vaadin-lumo-styles/mixins/field-button.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst chip = css`\n  :host {\n    font-size: var(--lumo-font-size-xxs);\n    line-height: 1;\n    padding: 0.3125em calc(0.5em + var(--lumo-border-radius-s) / 4);\n    color: var(--lumo-body-text-color);\n    border-radius: var(--lumo-border-radius-s);\n    background-color: var(--lumo-contrast-20pct);\n    cursor: var(--lumo-clickable-cursor);\n  }\n\n  :host([focused]) {\n    background-color: var(--lumo-primary-color);\n    color: var(--lumo-primary-contrast-color);\n  }\n\n  :host([focused]) [part='remove-button'] {\n    color: inherit;\n  }\n\n  :host(:not([part~='overflow']):not([readonly]):not([disabled])) {\n    padding-inline-end: 0;\n  }\n\n  :host([part~='overflow']) {\n    position: relative;\n    min-width: var(--lumo-size-xxs);\n    margin-inline-start: var(--lumo-space-s);\n  }\n\n  :host([part~='overflow'])::before,\n  :host([part~='overflow'])::after {\n    position: absolute;\n    content: '';\n    width: 100%;\n    height: 100%;\n    border-left: calc(var(--lumo-space-s) / 4) solid;\n    border-radius: var(--lumo-border-radius-s);\n    border-color: var(--lumo-contrast-30pct);\n  }\n\n  :host([part~='overflow'])::before {\n    left: calc(-1 * var(--lumo-space-s) / 2);\n  }\n\n  :host([part~='overflow'])::after {\n    left: calc(-1 * var(--lumo-space-s));\n  }\n\n  :host([part~='overflow-two']) {\n    margin-inline-start: calc(var(--lumo-space-s) / 2);\n  }\n\n  :host([part~='overflow-two'])::after {\n    display: none;\n  }\n\n  :host([part~='overflow-one']) {\n    margin-inline-start: 0;\n  }\n\n  :host([part~='overflow-one'])::before,\n  :host([part~='overflow-one'])::after {\n    display: none;\n  }\n\n  [part='label'] {\n    font-weight: 500;\n    line-height: 1.25;\n  }\n\n  [part='remove-button'] {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: -0.3125em;\n    margin-bottom: -0.3125em;\n    margin-inline-start: auto;\n    width: 1.25em;\n    height: 1.25em;\n    font-size: 1.5em;\n    transition: none;\n  }\n\n  [part='remove-button']::before {\n    content: var(--lumo-icons-cross);\n  }\n\n  :host([disabled]) [part='label'] {\n    color: var(--lumo-disabled-text-color);\n    -webkit-text-fill-color: var(--lumo-disabled-text-color);\n    pointer-events: none;\n  }\n`;\n\nregisterStyles('vaadin-multi-select-combo-box-chip', [fieldButton, chip], {\n  moduleId: 'lumo-multi-select-combo-box-chip',\n});\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/font-icons.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-multi-select-combo-box-item',\n  css`\n    @media (any-hover: hover) {\n      :host(:hover[readonly]) {\n        background-color: transparent;\n        cursor: default;\n      }\n    }\n  `,\n  {\n    moduleId: 'lumo-multi-select-combo-box-item',\n  },\n);\n\nconst multiSelectComboBox = css`\n  :host([has-value]) {\n    padding-inline-start: 0;\n  }\n\n  :host([has-value]) ::slotted(input:placeholder-shown) {\n    caret-color: var(--lumo-body-text-color) !important;\n  }\n\n  [part~='chip']:not(:last-of-type) {\n    margin-inline-end: var(--lumo-space-xs);\n  }\n\n  [part~='overflow']:not([hidden]) + :not(:empty) {\n    margin-inline-start: var(--lumo-space-xs);\n  }\n\n  [part='toggle-button']::before {\n    content: var(--lumo-icons-dropdown);\n  }\n\n  :host([readonly][has-value]) [part='toggle-button'] {\n    color: var(--lumo-contrast-60pct);\n    cursor: var(--lumo-clickable-cursor);\n  }\n`;\n\nregisterStyles('vaadin-multi-select-combo-box', [inputFieldShared, multiSelectComboBox], {\n  moduleId: 'lumo-multi-select-combo-box',\n});\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\n/**\n * An element used by `<vaadin-multi-select-combo-box>` to display selected items.\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name        | Description\n * -----------------|-------------\n * `label`          | Element containing the label\n * `remove-button`  | Remove button\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @extends HTMLElement\n * @private\n */\nclass MultiSelectComboBoxChip extends ThemableMixin(PolymerElement) {\n  static get is() {\n    return 'vaadin-multi-select-combo-box-chip';\n  }\n\n  static get properties() {\n    return {\n      disabled: {\n        type: Boolean,\n        reflectToAttribute: true,\n      },\n\n      readonly: {\n        type: Boolean,\n        reflectToAttribute: true,\n      },\n\n      label: {\n        type: String,\n      },\n\n      item: {\n        type: Object,\n      },\n    };\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n          align-self: center;\n          white-space: nowrap;\n          box-sizing: border-box;\n        }\n\n        [part='label'] {\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        :host(:is([readonly], [disabled], [part~='overflow'])) [part='remove-button'] {\n          display: none !important;\n        }\n      </style>\n      <div part=\"label\">[[label]]</div>\n      <div part=\"remove-button\" role=\"button\" on-click=\"_onRemoveClick\"></div>\n    `;\n  }\n\n  /** @private */\n  _onRemoveClick(event) {\n    event.stopPropagation();\n\n    this.dispatchEvent(\n      new CustomEvent('item-removed', {\n        detail: {\n          item: this.item,\n        },\n        bubbles: true,\n        composed: true,\n      }),\n    );\n  }\n}\n\ncustomElements.define(MultiSelectComboBoxChip.is, MultiSelectComboBoxChip);\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { InputContainer } from '@vaadin/input-container/src/vaadin-input-container.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-multi-select-combo-box-container',\n  css`\n    #wrapper {\n      display: flex;\n      width: 100%;\n    }\n  `,\n  {\n    moduleId: 'vaadin-multi-select-combo-box-container-styles',\n  },\n);\n\nlet memoizedTemplate;\n\n/**\n * An element used internally by `<vaadin-multi-select-combo-box>`. Not intended to be used separately.\n *\n * @extends InputContainer\n * @private\n */\nclass MultiSelectComboBoxContainer extends InputContainer {\n  static get is() {\n    return 'vaadin-multi-select-combo-box-container';\n  }\n\n  static get template() {\n    if (!memoizedTemplate) {\n      memoizedTemplate = super.template.cloneNode(true);\n      const content = memoizedTemplate.content;\n      const slots = content.querySelectorAll('slot');\n\n      const wrapper = document.createElement('div');\n      wrapper.setAttribute('id', 'wrapper');\n      content.insertBefore(wrapper, slots[2]);\n\n      wrapper.appendChild(slots[0]);\n      wrapper.appendChild(slots[1]);\n    }\n    return memoizedTemplate;\n  }\n}\n\ncustomElements.define(MultiSelectComboBoxContainer.is, MultiSelectComboBoxContainer);\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ComboBoxItem } from '@vaadin/combo-box/src/vaadin-combo-box-item.js';\n\n/**\n * An element used for items in `<vaadin-multi-select-combo-box>`.\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ----------|-------------\n * `content` | The element that wraps the item content\n *\n * The following state attributes are exposed for styling:\n *\n * Attribute  | Description                   | Part name\n * -----------|-------------------------------|-----------\n * `selected` | Set when the item is selected | :host\n * `focused`  | Set when the item is focused  | :host\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @extends ComboBoxItem\n * @private\n */\nclass MultiSelectComboBoxItem extends ComboBoxItem {\n  static get is() {\n    return 'vaadin-multi-select-combo-box-item';\n  }\n}\n\ncustomElements.define(MultiSelectComboBoxItem.is, MultiSelectComboBoxItem);\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ComboBoxOverlay } from '@vaadin/combo-box/src/vaadin-combo-box-overlay.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-multi-select-combo-box-overlay',\n  css`\n    #overlay {\n      width: var(\n        --vaadin-multi-select-combo-box-overlay-width,\n        var(--_vaadin-multi-select-combo-box-overlay-default-width, auto)\n      );\n    }\n  `,\n  { moduleId: 'vaadin-multi-select-combo-box-overlay-styles' },\n);\n\n/**\n * An element used internally by `<vaadin-multi-select-combo-box>`. Not intended to be used separately.\n *\n * @extends ComboBoxOverlay\n * @private\n */\nclass MultiSelectComboBoxOverlay extends ComboBoxOverlay {\n  static get is() {\n    return 'vaadin-multi-select-combo-box-overlay';\n  }\n}\n\ncustomElements.define(MultiSelectComboBoxOverlay.is, MultiSelectComboBoxOverlay);\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ComboBoxPlaceholder } from '@vaadin/combo-box/src/vaadin-combo-box-placeholder.js';\nimport { ComboBoxScroller } from '@vaadin/combo-box/src/vaadin-combo-box-scroller.js';\n\n/**\n * An element used internally by `<vaadin-multi-select-combo-box>`. Not intended to be used separately.\n *\n * @extends ComboBoxScroller\n * @private\n */\nclass MultiSelectComboBoxScroller extends ComboBoxScroller {\n  static get is() {\n    return 'vaadin-multi-select-combo-box-scroller';\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.setAttribute('aria-multiselectable', 'true');\n  }\n\n  /** @private */\n  __getAriaSelected(_focusedIndex, itemIndex) {\n    const item = this.items[itemIndex];\n    return this.__isItemSelected(item, null, this.itemIdPath).toString();\n  }\n\n  /** @private */\n  __isItemSelected(item, _selectedItem, itemIdPath) {\n    if (item instanceof ComboBoxPlaceholder) {\n      return false;\n    }\n\n    if (this.comboBox.readonly) {\n      return false;\n    }\n\n    return this.comboBox._findIndex(item, this.comboBox.selectedItems, itemIdPath) > -1;\n  }\n\n  /** @private */\n  __updateElement(el, index) {\n    super.__updateElement(el, index);\n\n    el.toggleAttribute('readonly', this.comboBox.readonly);\n  }\n}\n\ncustomElements.define(MultiSelectComboBoxScroller.is, MultiSelectComboBoxScroller);\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './vaadin-multi-select-combo-box-item.js';\nimport './vaadin-multi-select-combo-box-overlay.js';\nimport './vaadin-multi-select-combo-box-scroller.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ComboBoxDataProviderMixin } from '@vaadin/combo-box/src/vaadin-combo-box-data-provider-mixin.js';\nimport { ComboBoxMixin } from '@vaadin/combo-box/src/vaadin-combo-box-mixin.js';\nimport { ComboBoxPlaceholder } from '@vaadin/combo-box/src/vaadin-combo-box-placeholder.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\n/**\n * An element used internally by `<vaadin-multi-select-combo-box>`. Not intended to be used separately.\n *\n * @extends HTMLElement\n * @mixes ComboBoxDataProviderMixin\n * @mixes ComboBoxMixin\n * @mixes ThemableMixin\n * @private\n */\nclass MultiSelectComboBoxInternal extends ComboBoxDataProviderMixin(ComboBoxMixin(ThemableMixin(PolymerElement))) {\n  static get is() {\n    return 'vaadin-multi-select-combo-box-internal';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host([opened]) {\n          pointer-events: auto;\n        }\n      </style>\n\n      <slot></slot>\n\n      <vaadin-multi-select-combo-box-overlay\n        id=\"overlay\"\n        opened=\"[[_overlayOpened]]\"\n        loading$=\"[[loading]]\"\n        theme$=\"[[_theme]]\"\n        position-target=\"[[_target]]\"\n        no-vertical-overlap\n        restore-focus-node=\"[[inputElement]]\"\n      ></vaadin-multi-select-combo-box-overlay>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * A subset of items, filtered based on the user input.\n       */\n      filteredItems: {\n        type: Array,\n        notify: true,\n      },\n\n      /**\n       * When set to `true`, \"loading\" attribute is set\n       * on the host and the overlay element.\n       * @type {boolean}\n       */\n      loading: {\n        type: Boolean,\n        notify: true,\n      },\n\n      /**\n       * Total number of items.\n       * @type {number | undefined}\n       */\n      size: {\n        type: Number,\n        notify: true,\n      },\n\n      /**\n       * Selected items to render in the dropdown\n       * when the component is read-only.\n       */\n      selectedItems: {\n        type: Array,\n        value: () => [],\n      },\n\n      /**\n       * Last input value entered by the user before value is updated.\n       * Used to store `filter` property value before clearing it.\n       */\n      lastFilter: {\n        type: String,\n        notify: true,\n      },\n\n      _target: {\n        type: Object,\n      },\n    };\n  }\n\n  /**\n   * Reference to the clear button element.\n   * @protected\n   * @return {!HTMLElement}\n   */\n  get clearElement() {\n    return this.querySelector('[part=\"clear-button\"]');\n  }\n\n  /**\n   * Tag name prefix used by scroller and items.\n   * @protected\n   * @return {string}\n   */\n  get _tagNamePrefix() {\n    return 'vaadin-multi-select-combo-box';\n  }\n\n  /**\n   * Override method inherited from the combo-box\n   * to allow opening dropdown when readonly.\n   * @override\n   */\n  open() {\n    if (!this.disabled && !(this.readonly && this.selectedItems.length === 0)) {\n      this.opened = true;\n    }\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this._target = this;\n    this._toggleElement = this.querySelector('.toggle-button');\n  }\n\n  /**\n   * Override combo-box method to set correct owner for using by item renderers.\n   * This needs to be done before the scroller gets added to the DOM to ensure\n   * Lit directive works in case when combo-box is opened using attribute.\n   *\n   * @protected\n   * @override\n   */\n  _initScroller() {\n    const comboBox = this.getRootNode().host;\n\n    super._initScroller(comboBox);\n  }\n\n  /**\n   * Override method from `InputMixin`.\n   *\n   * @protected\n   * @override\n   */\n  clear() {\n    super.clear();\n\n    if (this.inputElement) {\n      this.inputElement.value = '';\n    }\n  }\n\n  /**\n   * Override Enter handler to keep overlay open\n   * when item is selected or unselected.\n   * @param {!Event} event\n   * @protected\n   * @override\n   */\n  _onEnter(event) {\n    this.__enterPressed = true;\n\n    super._onEnter(event);\n  }\n\n  /**\n   * @protected\n   * @override\n   */\n  _closeOrCommit() {\n    if (this.readonly) {\n      this.close();\n      return;\n    }\n\n    if (this.__enterPressed) {\n      this.__enterPressed = null;\n\n      // Keep selected item focused after committing on Enter.\n      const focusedItem = this.filteredItems[this._focusedIndex];\n      this._commitValue();\n      this._focusedIndex = this.filteredItems.indexOf(focusedItem);\n\n      return;\n    }\n\n    super._closeOrCommit();\n  }\n\n  /**\n   * @protected\n   * @override\n   */\n  _commitValue() {\n    // Store filter value for checking if user input is matching\n    // an item which is already selected, to not un-select it.\n    this.lastFilter = this.filter;\n\n    super._commitValue();\n  }\n\n  /**\n   * Override method inherited from the combo-box\n   * to not update focused item when readonly.\n   * @protected\n   * @override\n   */\n  _onArrowDown() {\n    if (!this.readonly) {\n      super._onArrowDown();\n    } else if (!this.opened) {\n      this.open();\n    }\n  }\n\n  /**\n   * Override method inherited from the combo-box\n   * to not update focused item when readonly.\n   * @protected\n   * @override\n   */\n  _onArrowUp() {\n    if (!this.readonly) {\n      super._onArrowUp();\n    } else if (!this.opened) {\n      this.open();\n    }\n  }\n\n  /**\n   * Override method inherited from the combo-box\n   * to close dropdown on blur when readonly.\n   * @param {FocusEvent} event\n   * @protected\n   * @override\n   */\n  _onFocusout(event) {\n    // Disable combo-box logic that updates selectedItem\n    // based on the overlay focused index on input blur\n    this._ignoreCommitValue = true;\n\n    super._onFocusout(event);\n\n    if (this.readonly && !this._closeOnBlurIsPrevented) {\n      this.close();\n    }\n  }\n\n  /**\n   * Override method inherited from the combo-box\n   * to not commit an already selected item again\n   * on blur, which would result in un-selecting.\n   * @protected\n   * @override\n   */\n  _detectAndDispatchChange() {\n    if (this._ignoreCommitValue) {\n      this._ignoreCommitValue = false;\n\n      // Reset internal combo-box state\n      this.selectedItem = null;\n      this._inputElementValue = '';\n      return;\n    }\n\n    super._detectAndDispatchChange();\n  }\n\n  /**\n   * @param {CustomEvent} event\n   * @protected\n   * @override\n   */\n  _overlaySelectedItemChanged(event) {\n    event.stopPropagation();\n\n    // Do not un-select on click when readonly\n    if (this.readonly) {\n      return;\n    }\n\n    if (event.detail.item instanceof ComboBoxPlaceholder) {\n      return;\n    }\n\n    if (this.opened) {\n      this.dispatchEvent(\n        new CustomEvent('combo-box-item-selected', {\n          detail: {\n            item: event.detail.item,\n          },\n        }),\n      );\n    }\n  }\n\n  /**\n   * Override method inherited from the combo-box\n   * to not request data provider when read-only.\n   *\n   * @param {number}\n   * @return {boolean}\n   * @protected\n   * @override\n   */\n  _shouldLoadPage(page) {\n    if (this.readonly) {\n      return false;\n    }\n\n    return super._shouldLoadPage(page);\n  }\n\n  /**\n   * Override method inherited from the combo-box\n   * to not clear the data provider cache when read-only.\n   *\n   * @protected\n   * @override\n   */\n  clearCache() {\n    if (this.readonly) {\n      return;\n    }\n\n    super.clearCache();\n  }\n}\n\ncustomElements.define(MultiSelectComboBoxInternal.is, MultiSelectComboBoxInternal);\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './vaadin-multi-select-combo-box-chip.js';\nimport './vaadin-multi-select-combo-box-container.js';\nimport './vaadin-multi-select-combo-box-internal.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { announce } from '@vaadin/component-base/src/a11y-announcer.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { ResizeMixin } from '@vaadin/component-base/src/resize-mixin.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\nimport { InputControlMixin } from '@vaadin/field-base/src/input-control-mixin.js';\nimport { InputController } from '@vaadin/field-base/src/input-controller.js';\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\nimport { css, registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst multiSelectComboBox = css`\n  :host {\n    --input-min-width: var(--vaadin-multi-select-combo-box-input-min-width, 4em);\n  }\n\n  [hidden] {\n    display: none !important;\n  }\n\n  #chips {\n    display: flex;\n    align-items: center;\n  }\n\n  ::slotted(input) {\n    box-sizing: border-box;\n    flex: 1 0 var(--input-min-width);\n  }\n\n  [part='chip'] {\n    flex: 0 1 auto;\n  }\n\n  :host(:is([readonly], [disabled])) ::slotted(input) {\n    flex-grow: 0;\n    flex-basis: 0;\n    padding: 0;\n  }\n`;\n\nregisterStyles('vaadin-multi-select-combo-box', [inputFieldShared, multiSelectComboBox], {\n  moduleId: 'vaadin-multi-select-combo-box-styles',\n});\n\n/**\n * `<vaadin-multi-select-combo-box>` is a web component that wraps `<vaadin-combo-box>` and extends\n * its functionality to allow selecting multiple items, in addition to basic features.\n *\n * ```html\n * <vaadin-multi-select-combo-box id=\"comboBox\"></vaadin-multi-select-combo-box>\n * ```\n *\n * ```js\n * const comboBox = document.querySelector('#comboBox');\n * comboBox.items = ['apple', 'banana', 'lemon', 'orange'];\n * comboBox.selectedItems = ['lemon', 'orange'];\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name              | Description\n * -----------------------|----------------\n * `chips`                | The element that wraps chips for selected items\n * `chip`                 | Chip shown for every selected item\n * `label`                | The label element\n * `input-field`          | The element that wraps prefix, value and suffix\n * `clear-button`         | The clear button\n * `error-message`        | The error message element\n * `helper-text`          | The helper text element wrapper\n * `required-indicator`   | The `required` state indicator element\n * `overflow`             | The chip shown when component width is not enough to fit all chips\n * `overflow-one`         | Set on the overflow chip when only one chip does not fit\n * `overflow-two`         | Set on the overflow chip when two chips do not fit\n * `toggle-button`        | The toggle button\n *\n * The following state attributes are available for styling:\n *\n * Attribute              | Description\n * -----------------------|-----------------\n * `disabled`             | Set to a disabled element\n * `has-value`            | Set when the element has a value\n * `has-label`            | Set when the element has a label\n * `has-helper`           | Set when the element has helper text or slot\n * `has-error-message`    | Set when the element has an error message\n * `invalid`              | Set when the element is invalid\n * `focused`              | Set when the element is focused\n * `focus-ring`           | Set when the element is keyboard focused\n * `loading`              | Set when loading items from the data provider\n * `opened`               | Set when the dropdown is open\n * `readonly`             | Set to a readonly element\n *\n * The following custom CSS properties are available for styling:\n *\n * Custom property                                      | Description                | Default\n * -----------------------------------------------------|----------------------------|--------\n * `--vaadin-field-default-width`                       | Default width of the field | `12em`\n * `--vaadin-multi-select-combo-box-overlay-width`      | Width of the overlay       | `auto`\n * `--vaadin-multi-select-combo-box-overlay-max-height` | Max height of the overlay  | `65vh`\n * `--vaadin-multi-select-combo-box-input-min-width`    | Min width of the input     | `4em`\n *\n * ### Internal components\n *\n * In addition to `<vaadin-multi-select-combo-box>` itself, the following internal\n * components are themable:\n *\n * - `<vaadin-multi-select-combo-box-overlay>` - has the same API as `<vaadin-overlay>`.\n * - `<vaadin-multi-select-combo-box-item>` - has the same API as `<vaadin-item>`.\n * - `<vaadin-multi-select-combo-box-container>` - has the same API as `<vaadin-input-container>`.\n *\n * Note: the `theme` attribute value set on `<vaadin-multi-select-combo-box>` is\n * propagated to these components.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} custom-value-set - Fired when the user sets a custom value.\n * @fires {CustomEvent} filter-changed - Fired when the `filter` property changes.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} selected-items-changed - Fired when the `selectedItems` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @extends HTMLElement\n * @mixes ElementMixin\n * @mixes ThemableMixin\n * @mixes InputControlMixin\n * @mixes ResizeMixin\n */\nclass MultiSelectComboBox extends ResizeMixin(InputControlMixin(ThemableMixin(ElementMixin(PolymerElement)))) {\n  static get is() {\n    return 'vaadin-multi-select-combo-box';\n  }\n\n  static get template() {\n    return html`\n      <div class=\"vaadin-multi-select-combo-box-container\">\n        <div part=\"label\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\n        </div>\n\n        <vaadin-multi-select-combo-box-internal\n          id=\"comboBox\"\n          items=\"[[__effectiveItems]]\"\n          item-id-path=\"[[itemIdPath]]\"\n          item-label-path=\"[[itemLabelPath]]\"\n          item-value-path=\"[[itemValuePath]]\"\n          disabled=\"[[disabled]]\"\n          readonly=\"[[readonly]]\"\n          auto-open-disabled=\"[[autoOpenDisabled]]\"\n          allow-custom-value=\"[[allowCustomValue]]\"\n          data-provider=\"[[dataProvider]]\"\n          filter=\"{{filter}}\"\n          last-filter=\"{{_lastFilter}}\"\n          loading=\"{{loading}}\"\n          size=\"{{size}}\"\n          filtered-items=\"[[__effectiveFilteredItems]]\"\n          selected-items=\"[[selectedItems]]\"\n          opened=\"{{opened}}\"\n          renderer=\"[[renderer]]\"\n          theme$=\"[[_theme]]\"\n          on-combo-box-item-selected=\"_onComboBoxItemSelected\"\n          on-change=\"_onComboBoxChange\"\n          on-custom-value-set=\"_onCustomValueSet\"\n          on-filtered-items-changed=\"_onFilteredItemsChanged\"\n        >\n          <vaadin-multi-select-combo-box-container\n            part=\"input-field\"\n            readonly=\"[[readonly]]\"\n            disabled=\"[[disabled]]\"\n            invalid=\"[[invalid]]\"\n            theme$=\"[[_theme]]\"\n          >\n            <vaadin-multi-select-combo-box-chip\n              id=\"overflow\"\n              slot=\"prefix\"\n              part$=\"[[_getOverflowPart(_overflowItems.length)]]\"\n              disabled=\"[[disabled]]\"\n              readonly=\"[[readonly]]\"\n              label=\"[[_getOverflowLabel(_overflowItems.length)]]\"\n              title$=\"[[_getOverflowTitle(_overflowItems)]]\"\n              hidden$=\"[[_isOverflowHidden(_overflowItems.length)]]\"\n              on-mousedown=\"_preventBlur\"\n            ></vaadin-multi-select-combo-box-chip>\n            <div id=\"chips\" part=\"chips\" slot=\"prefix\"></div>\n            <slot name=\"input\"></slot>\n            <div\n              id=\"clearButton\"\n              part=\"clear-button\"\n              slot=\"suffix\"\n              on-touchend=\"_onClearButtonTouchend\"\n              aria-hidden=\"true\"\n            ></div>\n            <div id=\"toggleButton\" class=\"toggle-button\" part=\"toggle-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\n          </vaadin-multi-select-combo-box-container>\n        </vaadin-multi-select-combo-box-internal>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Set true to prevent the overlay from opening automatically.\n       * @attr {boolean} auto-open-disabled\n       */\n      autoOpenDisabled: Boolean,\n\n      /**\n       * Set to true to display the clear icon which clears the input.\n       * @attr {boolean} clear-button-visible\n       */\n      clearButtonVisible: {\n        type: Boolean,\n        reflectToAttribute: true,\n        observer: '_clearButtonVisibleChanged',\n        value: false,\n      },\n\n      /**\n       * A full set of items to filter the visible options from.\n       * The items can be of either `String` or `Object` type.\n       */\n      items: {\n        type: Array,\n      },\n\n      /**\n       * The item property used for a visual representation of the item.\n       * @attr {string} item-label-path\n       */\n      itemLabelPath: {\n        type: String,\n        value: 'label',\n      },\n\n      /**\n       * Path for the value of the item. If `items` is an array of objects,\n       * this property is used as a string value for the selected item.\n       * @attr {string} item-value-path\n       */\n      itemValuePath: {\n        type: String,\n        value: 'value',\n      },\n\n      /**\n       * Path for the id of the item, used to detect whether the item is selected.\n       * @attr {string} item-id-path\n       */\n      itemIdPath: {\n        type: String,\n      },\n\n      /**\n       * The object used to localize this component.\n       * To change the default localization, replace the entire\n       * _i18n_ object or just the property you want to modify.\n       *\n       * The object has the following JSON structure and default values:\n       * ```\n       * {\n       *   // Screen reader announcement on clear button click.\n       *   cleared: 'Selection cleared',\n       *   // Screen reader announcement when a chip is focused.\n       *   focused: ' focused. Press Backspace to remove',\n       *   // Screen reader announcement when item is selected.\n       *   selected: 'added to selection',\n       *   // Screen reader announcement when item is deselected.\n       *   deselected: 'removed from selection',\n       *   // Screen reader announcement of the selected items count.\n       *   // {count} is replaced with the actual count of items.\n       *   total: '{count} items selected',\n       * }\n       * ```\n       * @type {!MultiSelectComboBoxI18n}\n       * @default {English/US}\n       */\n      i18n: {\n        type: Object,\n        value: () => {\n          return {\n            cleared: 'Selection cleared',\n            focused: 'focused. Press Backspace to remove',\n            selected: 'added to selection',\n            deselected: 'removed from selection',\n            total: '{count} items selected',\n          };\n        },\n      },\n\n      /**\n       * True when loading items from the data provider, false otherwise.\n       */\n      loading: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * When present, it specifies that the field is read-only.\n       */\n      readonly: {\n        type: Boolean,\n        value: false,\n        observer: '_readonlyChanged',\n        reflectToAttribute: true,\n      },\n\n      /**\n       * The list of selected items.\n       * Note: modifying the selected items creates a new array each time.\n       */\n      selectedItems: {\n        type: Array,\n        value: () => [],\n        notify: true,\n      },\n\n      /**\n       * True if the dropdown is open, false otherwise.\n       */\n      opened: {\n        type: Boolean,\n        notify: true,\n        value: false,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * Total number of items.\n       */\n      size: {\n        type: Number,\n      },\n\n      /**\n       * Number of items fetched at a time from the data provider.\n       * @attr {number} page-size\n       */\n      pageSize: {\n        type: Number,\n        value: 50,\n        observer: '_pageSizeChanged',\n      },\n\n      /**\n       * Function that provides items lazily. Receives two arguments:\n       *\n       * - `params` - Object with the following properties:\n       *   - `params.page` Requested page index\n       *   - `params.pageSize` Current page size\n       *   - `params.filter` Currently applied filter\n       *\n       * - `callback(items, size)` - Callback function with arguments:\n       *   - `items` Current page of items\n       *   - `size` Total number of items.\n       */\n      dataProvider: {\n        type: Object,\n      },\n\n      /**\n       * When true, the user can input a value that is not present in the items list.\n       * @attr {boolean} allow-custom-value\n       */\n      allowCustomValue: {\n        type: Boolean,\n        value: false,\n      },\n\n      /**\n       * A hint to the user of what can be entered in the control.\n       * The placeholder will be only displayed in the case when\n       * there is no item selected.\n       */\n      placeholder: {\n        type: String,\n        value: '',\n        observer: '_placeholderChanged',\n      },\n\n      /**\n       * Custom function for rendering the content of every item.\n       * Receives three arguments:\n       *\n       * - `root` The `<vaadin-multi-select-combo-box-item>` internal container DOM element.\n       * - `comboBox` The reference to the `<vaadin-multi-select-combo-box>` element.\n       * - `model` The object with the properties related with the rendered\n       *   item, contains:\n       *   - `model.index` The index of the rendered item.\n       *   - `model.item` The item.\n       */\n      renderer: Function,\n\n      /**\n       * Filtering string the user has typed into the input field.\n       */\n      filter: {\n        type: String,\n        value: '',\n        notify: true,\n      },\n\n      /**\n       * A subset of items, filtered based on the user input. Filtered items\n       * can be assigned directly to omit the internal filtering functionality.\n       * The items can be of either `String` or `Object` type.\n       */\n      filteredItems: Array,\n\n      /** @private */\n      value: {\n        type: String,\n      },\n\n      /** @private */\n      __effectiveItems: {\n        type: Array,\n        computed: '__computeEffectiveItems(items, selectedItems, readonly)',\n      },\n\n      /** @private */\n      __effectiveFilteredItems: {\n        type: Array,\n        computed: '__computeEffectiveFilteredItems(items, filteredItems, selectedItems, readonly)',\n      },\n\n      /** @private */\n      _overflowItems: {\n        type: Array,\n        value: () => [],\n      },\n\n      /** @private */\n      _focusedChipIndex: {\n        type: Number,\n        value: -1,\n        observer: '_focusedChipIndexChanged',\n      },\n\n      /** @private */\n      _lastFilter: {\n        type: String,\n      },\n    };\n  }\n\n  static get observers() {\n    return ['_selectedItemsChanged(selectedItems, selectedItems.*)'];\n  }\n\n  /** @protected */\n  get slotStyles() {\n    const tag = this.localName;\n    return [\n      ...super.slotStyles,\n      `\n        ${tag}[has-value] input::placeholder {\n          color: transparent !important;\n        }\n      `,\n    ];\n  }\n\n  /**\n   * Used by `InputControlMixin` as a reference to the clear button element.\n   * @protected\n   * @return {!HTMLElement}\n   */\n  get clearElement() {\n    return this.$.clearButton;\n  }\n\n  /** @protected */\n  get _chips() {\n    return this.shadowRoot.querySelectorAll('[part~=\"chip\"]');\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.addController(\n      new InputController(this, (input) => {\n        this._setInputElement(input);\n        this._setFocusElement(input);\n        this.stateTarget = input;\n        this.ariaTarget = input;\n      }),\n    );\n    this.addController(new LabelledInputController(this.inputElement, this._labelController));\n\n    this._inputField = this.shadowRoot.querySelector('[part=\"input-field\"]');\n    this.__updateChips();\n\n    processTemplates(this);\n  }\n\n  /**\n   * Returns true if the current input value satisfies all constraints (if any).\n   * @return {boolean}\n   */\n  checkValidity() {\n    return this.required && !this.readonly ? this._hasValue : true;\n  }\n\n  /**\n   * Clears the selected items.\n   */\n  clear() {\n    this.__updateSelection([]);\n\n    announce(this.i18n.cleared);\n  }\n\n  /**\n   * Clears the cached pages and reloads data from data provider when needed.\n   */\n  clearCache() {\n    if (this.$ && this.$.comboBox) {\n      this.$.comboBox.clearCache();\n    }\n  }\n\n  /**\n   * Requests an update for the content of items.\n   * While performing the update, it invokes the renderer (passed in the `renderer` property) once an item.\n   *\n   * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\n   */\n  requestContentUpdate() {\n    if (this.$ && this.$.comboBox) {\n      this.$.comboBox.requestContentUpdate();\n    }\n  }\n\n  /**\n   * Override method inherited from `DisabledMixin` to forward disabled to chips.\n   * @protected\n   * @override\n   */\n  _disabledChanged(disabled, oldDisabled) {\n    super._disabledChanged(disabled, oldDisabled);\n\n    if (disabled || oldDisabled) {\n      this.__updateChips();\n    }\n  }\n\n  /**\n   * Override method inherited from `InputMixin` to forward the input to combo-box.\n   * @protected\n   * @override\n   */\n  _inputElementChanged(input) {\n    super._inputElementChanged(input);\n\n    if (input) {\n      this.$.comboBox._setInputElement(input);\n    }\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to validate on blur.\n   * @param {boolean} focused\n   * @protected\n   */\n  _setFocused(focused) {\n    super._setFocused(focused);\n\n    if (!focused) {\n      this._focusedChipIndex = -1;\n      this.validate();\n    }\n  }\n\n  /**\n   * Implement callback from `ResizeMixin` to update chips.\n   * @protected\n   * @override\n   */\n  _onResize() {\n    this.__updateChips();\n  }\n\n  /**\n   * Override method from `DelegateStateMixin` to set required state\n   * using `aria-required` attribute instead of `required`, in order\n   * to prevent screen readers from announcing \"invalid entry\".\n   * @protected\n   * @override\n   */\n  _delegateAttribute(name, value) {\n    if (!this.stateTarget) {\n      return;\n    }\n\n    if (name === 'required') {\n      this._delegateAttribute('aria-required', value ? 'true' : false);\n      return;\n    }\n\n    super._delegateAttribute(name, value);\n  }\n\n  /**\n   * Setting clear button visible reduces total space available\n   * for rendering chips, and making it hidden increases it.\n   * @private\n   */\n  _clearButtonVisibleChanged(visible, oldVisible) {\n    if (visible || oldVisible) {\n      this.__updateChips();\n    }\n  }\n\n  /**\n   * Implement two-way binding for the `filteredItems` property\n   * that can be set on the internal combo-box element.\n   *\n   * @param {CustomEvent} event\n   * @private\n   */\n  _onFilteredItemsChanged(event) {\n    const { value } = event.detail;\n    if (Array.isArray(value) || value == null) {\n      this.filteredItems = value;\n    }\n  }\n\n  /** @private */\n  _readonlyChanged(readonly, oldReadonly) {\n    if (readonly || oldReadonly) {\n      this.__updateChips();\n    }\n\n    if (this.dataProvider) {\n      this.clearCache();\n    }\n  }\n\n  /** @private */\n  _pageSizeChanged(pageSize, oldPageSize) {\n    if (Math.floor(pageSize) !== pageSize || pageSize <= 0) {\n      this.pageSize = oldPageSize;\n      console.error('\"pageSize\" value must be an integer > 0');\n    }\n\n    this.$.comboBox.pageSize = this.pageSize;\n  }\n\n  /** @private */\n  _placeholderChanged(placeholder) {\n    const tmpPlaceholder = this.__tmpA11yPlaceholder;\n    // Do not store temporary placeholder\n    if (tmpPlaceholder !== placeholder) {\n      this.__savedPlaceholder = placeholder;\n\n      if (tmpPlaceholder) {\n        this.placeholder = tmpPlaceholder;\n      }\n    }\n  }\n\n  /** @private */\n  _selectedItemsChanged(selectedItems) {\n    this._toggleHasValue(this._hasValue);\n\n    // Use placeholder for announcing items\n    if (this._hasValue) {\n      const tmpPlaceholder = this._mergeItemLabels(selectedItems);\n      this.__tmpA11yPlaceholder = tmpPlaceholder;\n      this.placeholder = tmpPlaceholder;\n    } else {\n      delete this.__tmpA11yPlaceholder;\n      this.placeholder = this.__savedPlaceholder;\n    }\n\n    // Re-render chips\n    this.__updateChips();\n\n    // Update selected for dropdown items\n    this.requestContentUpdate();\n  }\n\n  /** @private */\n  _getItemLabel(item) {\n    return this.$.comboBox._getItemLabel(item);\n  }\n\n  /** @private */\n  _getOverflowLabel(length) {\n    return length;\n  }\n\n  /** @private */\n  _getOverflowPart(length) {\n    let part = `chip overflow`;\n\n    if (length === 1) {\n      part += ' overflow-one';\n    } else if (length === 2) {\n      part += ' overflow-two';\n    }\n\n    return part;\n  }\n\n  /** @private */\n  _getOverflowTitle(items) {\n    return this._mergeItemLabels(items);\n  }\n\n  /** @private */\n  _isOverflowHidden(length) {\n    return length === 0;\n  }\n\n  /** @private */\n  _mergeItemLabels(items) {\n    return items.map((item) => this._getItemLabel(item)).join(', ');\n  }\n\n  /** @private */\n  _findIndex(item, selectedItems, itemIdPath) {\n    if (itemIdPath && item) {\n      for (let index = 0; index < selectedItems.length; index++) {\n        if (selectedItems[index] && selectedItems[index][itemIdPath] === item[itemIdPath]) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    return selectedItems.indexOf(item);\n  }\n\n  /** @private */\n  __clearFilter() {\n    this.filter = '';\n    this.$.comboBox.clear();\n  }\n\n  /** @private */\n  __announceItem(itemLabel, isSelected, itemCount) {\n    const state = isSelected ? 'selected' : 'deselected';\n    const total = this.i18n.total.replace('{count}', itemCount || 0);\n    announce(`${itemLabel} ${this.i18n[state]} ${total}`);\n  }\n\n  /** @private */\n  __removeItem(item) {\n    const itemsCopy = [...this.selectedItems];\n    itemsCopy.splice(itemsCopy.indexOf(item), 1);\n    this.__updateSelection(itemsCopy);\n    const itemLabel = this._getItemLabel(item);\n    this.__announceItem(itemLabel, false, itemsCopy.length);\n  }\n\n  /** @private */\n  __selectItem(item) {\n    const itemsCopy = [...this.selectedItems];\n\n    const index = this._findIndex(item, itemsCopy, this.itemIdPath);\n    const itemLabel = this._getItemLabel(item);\n\n    let isSelected = false;\n\n    if (index !== -1) {\n      const lastFilter = this._lastFilter;\n      // Do not unselect when manually typing and committing an already selected item.\n      if (lastFilter && lastFilter.toLowerCase() === itemLabel.toLowerCase()) {\n        this.__clearFilter();\n        return;\n      }\n\n      itemsCopy.splice(index, 1);\n    } else {\n      itemsCopy.push(item);\n      isSelected = true;\n    }\n\n    this.__updateSelection(itemsCopy);\n\n    // Suppress `value-changed` event.\n    this.__clearFilter();\n\n    this.__announceItem(itemLabel, isSelected, itemsCopy.length);\n  }\n\n  /** @private */\n  __updateSelection(selectedItems) {\n    this.selectedItems = selectedItems;\n\n    this.validate();\n\n    this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\n  }\n\n  /** @private */\n  __createChip(item) {\n    const chip = document.createElement('vaadin-multi-select-combo-box-chip');\n    chip.setAttribute('part', 'chip');\n    chip.setAttribute('slot', 'prefix');\n\n    chip.item = item;\n    chip.disabled = this.disabled;\n    chip.readonly = this.readonly;\n\n    const label = this._getItemLabel(item);\n    chip.label = label;\n    chip.setAttribute('title', label);\n\n    chip.addEventListener('item-removed', (e) => this._onItemRemoved(e));\n    chip.addEventListener('mousedown', (e) => this._preventBlur(e));\n\n    return chip;\n  }\n\n  /** @private */\n  __getOverflowWidth() {\n    const chip = this.$.overflow;\n\n    chip.style.visibility = 'hidden';\n    chip.removeAttribute('hidden');\n\n    // Detect max possible width of the overflow chip\n    chip.setAttribute('part', 'chip overflow');\n    const overflowStyle = getComputedStyle(chip);\n    const overflowWidth = chip.clientWidth + parseInt(overflowStyle.marginInlineStart);\n\n    chip.setAttribute('hidden', '');\n    chip.style.visibility = '';\n\n    return overflowWidth;\n  }\n\n  /** @private */\n  __updateChips() {\n    if (!this._inputField) {\n      return;\n    }\n\n    // Clear all chips except the overflow\n    Array.from(this._chips).forEach((chip) => {\n      if (chip !== this.$.overflow) {\n        chip.remove();\n      }\n    });\n\n    const items = [...this.selectedItems];\n\n    // Detect available remaining width for chips\n    const totalWidth = this._inputField.$.wrapper.clientWidth;\n    const inputWidth = parseInt(getComputedStyle(this.inputElement).flexBasis);\n\n    let remainingWidth = totalWidth - inputWidth;\n\n    if (items.length > 1) {\n      remainingWidth -= this.__getOverflowWidth();\n    }\n\n    // Add chips until remaining width is exceeded\n    for (let i = items.length - 1, refNode = null; i >= 0; i--) {\n      const chip = this.__createChip(items[i]);\n      this.$.chips.insertBefore(chip, refNode);\n\n      if (this.$.chips.clientWidth > remainingWidth) {\n        chip.remove();\n        break;\n      }\n\n      items.pop();\n      refNode = chip;\n    }\n\n    this._overflowItems = items;\n  }\n\n  /** @private */\n  _onClearButtonTouchend(event) {\n    // Cancel the following click and focus events\n    event.preventDefault();\n\n    this.clear();\n  }\n\n  /**\n   * Override method inherited from `InputControlMixin` and clear items.\n   * @protected\n   * @override\n   */\n  _onClearButtonClick(event) {\n    event.stopPropagation();\n\n    this.clear();\n  }\n\n  /**\n   * Override an event listener from `InputControlMixin` to\n   * stop the change event re-targeted from the input.\n   *\n   * @param {!Event} event\n   * @protected\n   * @override\n   */\n  _onChange(event) {\n    event.stopPropagation();\n  }\n\n  /**\n   * Override an event listener from `KeyboardMixin`.\n   * Do not call `super` in order to override clear\n   * button logic defined in `InputControlMixin`.\n   *\n   * @param {!KeyboardEvent} event\n   * @protected\n   * @override\n   */\n  _onEscape(event) {\n    if (this.clearButtonVisible && this.selectedItems && this.selectedItems.length) {\n      event.stopPropagation();\n      this.selectedItems = [];\n    }\n  }\n\n  /**\n   * Override an event listener from `KeyboardMixin`.\n   * @param {KeyboardEvent} event\n   * @protected\n   * @override\n   */\n  _onKeyDown(event) {\n    super._onKeyDown(event);\n\n    const chips = Array.from(this._chips).slice(1);\n\n    if (!this.readonly && chips.length > 0) {\n      switch (event.key) {\n        case 'Backspace':\n          this._onBackSpace(chips);\n          break;\n        case 'ArrowLeft':\n          this._onArrowLeft(chips);\n          break;\n        case 'ArrowRight':\n          this._onArrowRight(chips);\n          break;\n        default:\n          this._focusedChipIndex = -1;\n          break;\n      }\n    }\n  }\n\n  /** @private */\n  _onArrowLeft(chips) {\n    if (this.inputElement.value !== '' || this.opened) {\n      return;\n    }\n\n    const idx = this._focusedChipIndex;\n    let newIdx;\n\n    if (this.getAttribute('dir') !== 'rtl') {\n      if (idx === -1) {\n        // Focus last chip\n        newIdx = chips.length - 1;\n      } else if (idx > 0) {\n        // Focus prev chip\n        newIdx = idx - 1;\n      }\n    } else if (idx === chips.length - 1) {\n      // Blur last chip\n      newIdx = -1;\n    } else if (idx > -1) {\n      // Focus next chip\n      newIdx = idx + 1;\n    }\n\n    if (newIdx !== undefined) {\n      this._focusedChipIndex = newIdx;\n    }\n  }\n\n  /** @private */\n  _onArrowRight(chips) {\n    if (this.inputElement.value !== '' || this.opened) {\n      return;\n    }\n\n    const idx = this._focusedChipIndex;\n    let newIdx;\n\n    if (this.getAttribute('dir') === 'rtl') {\n      if (idx === -1) {\n        // Focus last chip\n        newIdx = chips.length - 1;\n      } else if (idx > 0) {\n        // Focus prev chip\n        newIdx = idx - 1;\n      }\n    } else if (idx === chips.length - 1) {\n      // Blur last chip\n      newIdx = -1;\n    } else if (idx > -1) {\n      // Focus next chip\n      newIdx = idx + 1;\n    }\n\n    if (newIdx !== undefined) {\n      this._focusedChipIndex = newIdx;\n    }\n  }\n\n  /** @private */\n  _onBackSpace(chips) {\n    if (this.inputElement.value !== '' || this.opened) {\n      return;\n    }\n\n    const idx = this._focusedChipIndex;\n    if (idx === -1) {\n      this._focusedChipIndex = chips.length - 1;\n    } else {\n      this.__removeItem(chips[idx].item);\n      this._focusedChipIndex = -1;\n    }\n  }\n\n  /** @private */\n  _focusedChipIndexChanged(focusedIndex, oldFocusedIndex) {\n    if (focusedIndex > -1 || oldFocusedIndex > -1) {\n      const chips = Array.from(this._chips).slice(1);\n      chips.forEach((chip, index) => {\n        chip.toggleAttribute('focused', index === focusedIndex);\n      });\n\n      // Announce focused chip\n      if (focusedIndex > -1) {\n        const item = chips[focusedIndex].item;\n        const itemLabel = this._getItemLabel(item);\n        announce(`${itemLabel} ${this.i18n.focused}`);\n      }\n    }\n  }\n\n  /** @private */\n  _onComboBoxChange() {\n    const item = this.$.comboBox.selectedItem;\n    if (item) {\n      this.__selectItem(item);\n    }\n  }\n\n  /** @private */\n  _onComboBoxItemSelected(event) {\n    this.__selectItem(event.detail.item);\n  }\n\n  /** @private */\n  _onCustomValueSet(event) {\n    // Do not set combo-box value\n    event.preventDefault();\n\n    // Stop the original event\n    event.stopPropagation();\n\n    this.__clearFilter();\n\n    this.dispatchEvent(\n      new CustomEvent('custom-value-set', {\n        detail: event.detail,\n        composed: true,\n        bubbles: true,\n      }),\n    );\n  }\n\n  /** @private */\n  _onItemRemoved(event) {\n    this.__removeItem(event.detail.item);\n  }\n\n  /** @private */\n  _preventBlur(event) {\n    // Prevent mousedown event to keep the input focused\n    // and keep the overlay opened when clicking a chip.\n    event.preventDefault();\n  }\n\n  /** @private */\n  __computeEffectiveItems(items, selectedItems, readonly) {\n    return items && readonly ? selectedItems : items;\n  }\n\n  /** @private */\n  __computeEffectiveFilteredItems(items, filteredItems, selectedItems, readonly) {\n    return !items && readonly ? selectedItems : filteredItems;\n  }\n\n  /**\n   * Override a method from `InputMixin` to\n   * compute the presence of value based on `selectedItems`.\n   *\n   * @protected\n   * @override\n   */\n  get _hasValue() {\n    return this.selectedItems && this.selectedItems.length > 0;\n  }\n}\n\ncustomElements.define(MultiSelectComboBox.is, MultiSelectComboBox);\n\nexport { MultiSelectComboBox };\n"],
  "mappings": "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",
  "names": ["css", "registerStyles", "css", "registerStyles", "css", "registerStyles", "html", "PolymerElement", "ComboBoxPlaceholder", "ThemableMixin", "html", "PolymerElement", "inputFieldShared", "css", "registerStyles", "ThemableMixin", "multiSelectComboBox", "chip"]
}
